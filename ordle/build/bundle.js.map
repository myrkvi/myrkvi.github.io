{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/WordleRow.svelte","../../src/words.js","../../src/Wordle.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.3' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script lang=\"ts\">\n    export let correctSolution = ''\n    export let isActive = false\n    export let onProcessed: (isCorrect: boolean) => void\n\n    enum StateClass {\n        EMPTY = \"empty\",\n        UNEVALUATED = \"unevaluated\",\n        WRONG = \"unevaluated\",\n        WRONG_POSITION = \"wrong-position\",\n        CORRECT = \"correct\",\n    }\n\n    class Input {\n        state = StateClass.EMPTY\n        character = '*'\n    }\n\n    let currentInput = 0\n    let inputs = [new Input(), new Input(), new Input(), new Input(), new Input()]\n\n    function parseKey(event: KeyboardEvent) {\n        if (!isActive) return\n\n        let key = event.key\n\n        if (key === \"Enter\" && currentInput == 5) {\n            let uppercaseSolution = correctSolution.toUpperCase()\n            let newStates = inputs.map((input, index) => {\n                if(uppercaseSolution[index].toUpperCase() == input.character.toUpperCase()) {\n                    return StateClass.CORRECT\n                } else if (uppercaseSolution.includes(input.character.toUpperCase())) {\n                    return StateClass.WRONG_POSITION\n                }\n                return StateClass.UNEVALUATED\n            })\n            \n            onProcessed(newStates.every(state => { state == StateClass.CORRECT }))\n\n            inputs = inputs.map((input, index) => {\n                return {\n                    state: newStates[index],\n                    character: input.character,\n                }\n            })\n\n            isActive = false\n        } else if (key === \"Backspace\" && currentInput > 0) {\n            currentInput -= 1\n            inputs[currentInput].state = StateClass.EMPTY\n            inputs[currentInput].character = '*'\n        } else if (key.length == 1 && /^[A-Za-zÆØÅæøå]$/.test(key) && currentInput < 5) {\n            inputs[currentInput].state = StateClass.UNEVALUATED\n            inputs[currentInput].character = key\n            \n            currentInput += 1\n        }\n    }\n</script>\n\n<svelte:body on:keydown={event => parseKey(event)} />\n\n<div class=\"row {isActive ? \"active\" : \"\"}\">\n    {#each inputs as {state, character}}\n        <div class=\"character {state}\">{character}</div>\n    {/each}\n</div>\n\n<style>\n    :root {\n        --wordle-width: min(4rem, 8vw);\n    }\n\n    .row {\n        margin: 2px auto;\n    }\n\n    .active {\n        background-color: #FFFFFF11;\n    }\n\n    .character {\n        display: inline-flex;\n\n        vertical-align: middle;\n        justify-content: center;\n        font-family: 'Clear Sans' sans-serif;\n        font-size: var(--wordle-width);\n        font-weight: bold;\n        color: rgb(255, 255, 255);\n        text-transform: capitalize;\n\n        border: 2px solid #5e5e5e;\n        width: var(--wordle-width);\n        line-height: var(--wordle-width);\n\n        margin: 2px;\n        padding: 5px;\n    }\n\n    .empty { \n        color: #FFFFFF00;\n    }\n\n    .unevaluated {\n        background-color: #5e5e5e;\n    }\n\n    .wrong-position {\n        background-color: #d1c235;\n    }\n\n    .correct {\n        background-color: #1f9c1f;\n\n    }\n</style>","export let words = [\n    \"årbok\",\n    \"kisel\",\n    \"brunt\",\n    \"lorje\",\n    \"bæsje\",\n    \"prise\",\n    \"faren\",\n    \"guste\",\n    \"sleik\",\n    \"hesja\",\n    \"ujamn\",\n    \"vinsj\",\n    \"opiat\",\n    \"klagd\",\n    \"venøs\",\n    \"søple\",\n    \"kveil\",\n    \"blakt\",\n    \"lemur\",\n    \"greip\",\n    \"udøpt\",\n    \"urven\",\n    \"vimre\",\n    \"peila\",\n    \"rifla\",\n    \"swazi\",\n    \"alkyn\",\n    \"mjukt\",\n    \"breit\",\n    \"døsig\",\n    \"anode\",\n    \"reing\",\n    \"sleng\",\n    \"sakte\",\n    \"tumle\",\n    \"sålet\",\n    \"laust\",\n    \"uhelt\",\n    \"besøk\",\n    \"gjøde\",\n    \"filme\",\n    \"pysen\",\n    \"spole\",\n    \"sable\",\n    \"beæra\",\n    \"troke\",\n    \"egdsk\",\n    \"bylte\",\n    \"kryet\",\n    \"dunsa\",\n    \"marki\",\n    \"altså\",\n    \"gysje\",\n    \"briks\",\n    \"jaget\",\n    \"blåne\",\n    \"forgå\",\n    \"plebs\",\n    \"høkra\",\n    \"pløye\",\n    \"odlet\",\n    \"larve\",\n    \"svipa\",\n    \"uløst\",\n    \"langt\",\n    \"knuse\",\n    \"tiska\",\n    \"smøre\",\n    \"prove\",\n    \"touch\",\n    \"gylna\",\n    \"ulærd\",\n    \"siden\",\n    \"vipsa\",\n    \"ærend\",\n    \"fremt\",\n    \"ombud\",\n    \"sulky\",\n    \"bolke\",\n    \"lauve\",\n    \"snerk\",\n    \"hurpa\",\n    \"lurka\",\n    \"knast\",\n    \"resin\",\n    \"morsk\",\n    \"brønt\",\n    \"fukte\",\n    \"øksla\",\n    \"snerp\",\n    \"avsug\",\n    \"røykt\",\n    \"bolte\",\n    \"skovl\",\n    \"væska\",\n    \"hulka\",\n    \"utøvd\",\n    \"peilt\",\n    \"mølje\",\n    \"droge\",\n    \"gjure\",\n    \"nifst\",\n    \"gouda\",\n    \"flash\",\n    \"tykne\",\n    \"imago\",\n    \"botne\",\n    \"laden\",\n    \"stove\",\n    \"limbo\",\n    \"skift\",\n    \"jubla\",\n    \"slipt\",\n    \"gitra\",\n    \"hauld\",\n    \"klypt\",\n    \"olmet\",\n    \"sitar\",\n    \"snapt\",\n    \"usexy\",\n    \"munke\",\n    \"drunt\",\n    \"knart\",\n    \"uskap\",\n    \"skjør\",\n    \"hinka\",\n    \"blekt\",\n    \"tøyle\",\n    \"omega\",\n    \"refsa\",\n    \"tolke\",\n    \"aphel\",\n    \"kvern\",\n    \"sålde\",\n    \"øsing\",\n    \"nåvel\",\n    \"vinst\",\n    \"vrist\",\n    \"ubygd\",\n    \"røkje\",\n    \"silur\",\n    \"lægra\",\n    \"major\",\n    \"løyse\",\n    \"dorma\",\n    \"kitle\",\n    \"agoni\",\n    \"danke\",\n    \"dyvåt\",\n    \"avsky\",\n    \"funke\",\n    \"rålet\",\n    \"torva\",\n    \"oktav\",\n    \"buden\",\n    \"råhet\",\n    \"limet\",\n    \"vedgå\",\n    \"glans\",\n    \"bilyd\",\n    \"ugras\",\n    \"felås\",\n    \"rocka\",\n    \"purda\",\n    \"ifjor\",\n    \"skira\",\n    \"tråen\",\n    \"auing\",\n    \"klaps\",\n    \"gufsa\",\n    \"kvalm\",\n    \"rugla\",\n    \"stril\",\n    \"pyset\",\n    \"skade\",\n    \"tilgå\",\n    \"surne\",\n    \"drypt\",\n    \"mobil\",\n    \"sulet\",\n    \"hålke\",\n    \"fælna\",\n    \"lunsj\",\n    \"polar\",\n    \"klore\",\n    \"ljuge\",\n    \"bantu\",\n    \"nadir\",\n    \"dolce\",\n    \"argon\",\n    \"adept\",\n    \"dåset\",\n    \"dreis\",\n    \"klump\",\n    \"kilde\",\n    \"kumpe\",\n    \"fløte\",\n    \"liver\",\n    \"campe\",\n    \"gravd\",\n    \"flyge\",\n    \"skarv\",\n    \"bande\",\n    \"linse\",\n    \"blote\",\n    \"brent\",\n    \"trøsk\",\n    \"sonar\",\n    \"kople\",\n    \"datum\",\n    \"brøst\",\n    \"døsen\",\n    \"husky\",\n    \"håvet\",\n    \"kynde\",\n    \"maure\",\n    \"seira\",\n    \"skrål\",\n    \"party\",\n    \"surla\",\n    \"pirål\",\n    \"tøfla\",\n    \"tiger\",\n    \"vader\",\n    \"henta\",\n    \"nødet\",\n    \"raide\",\n    \"rying\",\n    \"bluse\",\n    \"stomp\",\n    \"bruke\",\n    \"føler\",\n    \"rista\",\n    \"sankt\",\n    \"eldst\",\n    \"valke\",\n    \"otium\",\n    \"juris\",\n    \"feida\",\n    \"garpe\",\n    \"tykna\",\n    \"folet\",\n    \"holet\",\n    \"pirum\",\n    \"sleid\",\n    \"rough\",\n    \"kjapt\",\n    \"gnura\",\n    \"kjøve\",\n    \"trive\",\n    \"andel\",\n    \"doret\",\n    \"lunka\",\n    \"tåfis\",\n    \"mynte\",\n    \"prøve\",\n    \"sober\",\n    \"vånda\",\n    \"svira\",\n    \"skurv\",\n    \"hauge\",\n    \"yting\",\n    \"dufta\",\n    \"morin\",\n    \"synke\",\n    \"grunt\",\n    \"bolig\",\n    \"havre\",\n    \"solår\",\n    \"legat\",\n    \"risla\",\n    \"skare\",\n    \"plysj\",\n    \"liktå\",\n    \"utarm\",\n    \"mjaue\",\n    \"utmed\",\n    \"hysje\",\n    \"svelg\",\n    \"anset\",\n    \"revna\",\n    \"gjøre\",\n    \"klips\",\n    \"gjæra\",\n    \"gaple\",\n    \"ymist\",\n    \"skarp\",\n    \"sedan\",\n    \"usåra\",\n    \"sneid\",\n    \"spylt\",\n    \"brisk\",\n    \"dator\",\n    \"dogme\",\n    \"gafle\",\n    \"pirsa\",\n    \"ujevn\",\n    \"fight\",\n    \"klare\",\n    \"caste\",\n    \"modne\",\n    \"nøsta\",\n    \"onyks\",\n    \"brase\",\n    \"hetsa\",\n    \"hegda\",\n    \"nuske\",\n    \"kamin\",\n    \"spikt\",\n    \"vante\",\n    \"hegna\",\n    \"avlet\",\n    \"røste\",\n    \"tesla\",\n    \"flørt\",\n    \"uvane\",\n    \"dulte\",\n    \"pøbla\",\n    \"burka\",\n    \"shake\",\n    \"øskje\",\n    \"hulag\",\n    \"muget\",\n    \"lymfe\",\n    \"freon\",\n    \"klone\",\n    \"faste\",\n    \"kjavd\",\n    \"hubro\",\n    \"nidsk\",\n    \"pinsa\",\n    \"tusla\",\n    \"kogle\",\n    \"usant\",\n    \"puger\",\n    \"forum\",\n    \"uvant\",\n    \"vifte\",\n    \"fikst\",\n    \"gjeld\",\n    \"kapre\",\n    \"tilbe\",\n    \"språk\",\n    \"dikta\",\n    \"vatre\",\n    \"ritus\",\n    \"ørsmå\",\n    \"fuske\",\n    \"pitle\",\n    \"segna\",\n    \"hekta\",\n    \"floks\",\n    \"langs\",\n    \"grace\",\n    \"blidt\",\n    \"stenk\",\n    \"ørskt\",\n    \"blant\",\n    \"duplo\",\n    \"pride\",\n    \"sagmo\",\n    \"tjalk\",\n    \"pakte\",\n    \"sprek\",\n    \"giver\",\n    \"fødes\",\n    \"vikle\",\n    \"jambe\",\n    \"neida\",\n    \"ratio\",\n    \"longe\",\n    \"alkyd\",\n    \"vaiet\",\n    \"røska\",\n    \"harke\",\n    \"kives\",\n    \"kurve\",\n    \"dusja\",\n    \"fiste\",\n    \"tråle\",\n    \"dikte\",\n    \"pløse\",\n    \"maser\",\n    \"slyng\",\n    \"svimt\",\n    \"svirt\",\n    \"nufsa\",\n    \"podet\",\n    \"kjært\",\n    \"dekor\",\n    \"ynkes\",\n    \"humør\",\n    \"velar\",\n    \"juvel\",\n    \"plirt\",\n    \"kvelt\",\n    \"tørka\",\n    \"kvige\",\n    \"riksa\",\n    \"skape\",\n    \"dreia\",\n    \"ilbud\",\n    \"rumpe\",\n    \"rause\",\n    \"ømhet\",\n    \"bjørk\",\n    \"lunet\",\n    \"kring\",\n    \"løype\",\n    \"gevir\",\n    \"gryne\",\n    \"avist\",\n    \"entra\",\n    \"sikra\",\n    \"sjåke\",\n    \"høvel\",\n    \"gnier\",\n    \"mycel\",\n    \"filma\",\n    \"vimse\",\n    \"ruget\",\n    \"gulpa\",\n    \"kamse\",\n    \"angle\",\n    \"støpe\",\n    \"reikt\",\n    \"øling\",\n    \"karse\",\n    \"smale\",\n    \"løyve\",\n    \"pynte\",\n    \"rugle\",\n    \"vandt\",\n    \"klåte\",\n    \"soare\",\n    \"shelf\",\n    \"sløvt\",\n    \"krone\",\n    \"søker\",\n    \"sukat\",\n    \"prust\",\n    \"uøvet\",\n    \"radet\",\n    \"fylke\",\n    \"ufint\",\n    \"sivåt\",\n    \"polær\",\n    \"sokne\",\n    \"ofret\",\n    \"ødsla\",\n    \"ordet\",\n    \"arsen\",\n    \"knuge\",\n    \"modig\",\n    \"undre\",\n    \"pensa\",\n    \"eitra\",\n    \"prakt\",\n    \"ublyg\",\n    \"udelt\",\n    \"davit\",\n    \"vimen\",\n    \"råtne\",\n    \"proet\",\n    \"knopa\",\n    \"hybel\",\n    \"kriga\",\n    \"dusin\",\n    \"krota\",\n    \"finte\",\n    \"helga\",\n    \"inert\",\n    \"spark\",\n    \"grøpt\",\n    \"gløse\",\n    \"steam\",\n    \"roing\",\n    \"mulra\",\n    \"synål\",\n    \"floke\",\n    \"horsa\",\n    \"pleid\",\n    \"fjæra\",\n    \"snøet\",\n    \"prekt\",\n    \"higet\",\n    \"ferta\",\n    \"bravt\",\n    \"fisla\",\n    \"halve\",\n    \"tjore\",\n    \"mulig\",\n    \"borda\",\n    \"fysak\",\n    \"hælet\",\n    \"episk\",\n    \"kling\",\n    \"parti\",\n    \"rødna\",\n    \"sørgd\",\n    \"posør\",\n    \"udekt\",\n    \"sjarm\",\n    \"dvask\",\n    \"hinta\",\n    \"brink\",\n    \"oldis\",\n    \"bilde\",\n    \"ynges\",\n    \"akson\",\n    \"gamin\",\n    \"serva\",\n    \"hevla\",\n    \"trang\",\n    \"minus\",\n    \"knyte\",\n    \"older\",\n    \"jævli\",\n    \"frise\",\n    \"krugt\",\n    \"lurva\",\n    \"skrog\",\n    \"klove\",\n    \"sogna\",\n    \"høsta\",\n    \"kvaps\",\n    \"lagom\",\n    \"bukse\",\n    \"kjemi\",\n    \"nedpå\",\n    \"infam\",\n    \"knaus\",\n    \"rankt\",\n    \"lotus\",\n    \"ferja\",\n    \"gjøne\",\n    \"vitse\",\n    \"ptroe\",\n    \"flint\",\n    \"forta\",\n    \"halon\",\n    \"fomla\",\n    \"multe\",\n    \"habil\",\n    \"rumle\",\n    \"mjølk\",\n    \"filer\",\n    \"staup\",\n    \"frita\",\n    \"linda\",\n    \"yngla\",\n    \"runka\",\n    \"sovna\",\n    \"aping\",\n    \"snoka\",\n    \"anrop\",\n    \"farse\",\n    \"frøse\",\n    \"kader\",\n    \"krast\",\n    \"isand\",\n    \"navle\",\n    \"spøte\",\n    \"dusta\",\n    \"knoge\",\n    \"bråna\",\n    \"løent\",\n    \"flake\",\n    \"blink\",\n    \"blygt\",\n    \"hindu\",\n    \"narko\",\n    \"sluke\",\n    \"lutre\",\n    \"jamen\",\n    \"ginet\",\n    \"klivd\",\n    \"rafte\",\n    \"sigar\",\n    \"holde\",\n    \"strøm\",\n    \"gryte\",\n    \"drøse\",\n    \"røyne\",\n    \"tålig\",\n    \"utmål\",\n    \"harmt\",\n    \"oksid\",\n    \"prest\",\n    \"bolet\",\n    \"ohmsk\",\n    \"pønsa\",\n    \"sving\",\n    \"sylta\",\n    \"derom\",\n    \"matro\",\n    \"humla\",\n    \"snarp\",\n    \"bonum\",\n    \"svømt\",\n    \"kogla\",\n    \"ringe\",\n    \"hånle\",\n    \"uegna\",\n    \"laten\",\n    \"akter\",\n    \"gydje\",\n    \"gulpe\",\n    \"ishav\",\n    \"fjomp\",\n    \"falde\",\n    \"fleis\",\n    \"devot\",\n    \"kivet\",\n    \"huget\",\n    \"pinke\",\n    \"putle\",\n    \"flyve\",\n    \"drent\",\n    \"lakei\",\n    \"patos\",\n    \"tråde\",\n    \"kjøpt\",\n    \"kjøpe\",\n    \"spord\",\n    \"dunge\",\n    \"sikle\",\n    \"ringt\",\n    \"knega\",\n    \"modus\",\n    \"pelsa\",\n    \"kløft\",\n    \"skrud\",\n    \"tjuvd\",\n    \"dagne\",\n    \"atoni\",\n    \"moped\",\n    \"visna\",\n    \"bison\",\n    \"front\",\n    \"knult\",\n    \"hutla\",\n    \"flant\",\n    \"linka\",\n    \"brist\",\n    \"rigel\",\n    \"sleva\",\n    \"skave\",\n    \"ubont\",\n    \"zloty\",\n    \"goter\",\n    \"pønse\",\n    \"buste\",\n    \"mønja\",\n    \"punkt\",\n    \"arget\",\n    \"virak\",\n    \"bulne\",\n    \"sikre\",\n    \"risle\",\n    \"gaume\",\n    \"polka\",\n    \"purla\",\n    \"vikje\",\n    \"vinka\",\n    \"kuste\",\n    \"radig\",\n    \"lekra\",\n    \"vande\",\n    \"gauke\",\n    \"gløde\",\n    \"åpner\",\n    \"ravet\",\n    \"børse\",\n    \"fakir\",\n    \"hekla\",\n    \"kvile\",\n    \"røkte\",\n    \"cesur\",\n    \"lekta\",\n    \"heilo\",\n    \"lagje\",\n    \"salvo\",\n    \"famle\",\n    \"skjød\",\n    \"citer\",\n    \"menga\",\n    \"bikte\",\n    \"løyst\",\n    \"mulne\",\n    \"laket\",\n    \"sukre\",\n    \"røsta\",\n    \"soven\",\n    \"ubøyd\",\n    \"vinyl\",\n    \"kråla\",\n    \"fjøre\",\n    \"advis\",\n    \"divan\",\n    \"poste\",\n    \"foaje\",\n    \"jorta\",\n    \"tinde\",\n    \"panel\",\n    \"verkt\",\n    \"tumor\",\n    \"lesto\",\n    \"ynder\",\n    \"govet\",\n    \"larme\",\n    \"hogst\",\n    \"mødig\",\n    \"sjako\",\n    \"finsk\",\n    \"fersk\",\n    \"nusle\",\n    \"røken\",\n    \"bivra\",\n    \"fasle\",\n    \"brøde\",\n    \"graps\",\n    \"kløve\",\n    \"vispe\",\n    \"abort\",\n    \"dynke\",\n    \"gripe\",\n    \"dyste\",\n    \"jakte\",\n    \"rakst\",\n    \"leika\",\n    \"sebra\",\n    \"vaken\",\n    \"grimt\",\n    \"fakse\",\n    \"fymat\",\n    \"hjule\",\n    \"hølje\",\n    \"hespa\",\n    \"kapun\",\n    \"agent\",\n    \"garne\",\n    \"svale\",\n    \"panir\",\n    \"tempo\",\n    \"mygla\",\n    \"sløye\",\n    \"utsyn\",\n    \"blunk\",\n    \"flaks\",\n    \"logre\",\n    \"hauke\",\n    \"oksyd\",\n    \"agens\",\n    \"sørpå\",\n    \"livat\",\n    \"auret\",\n    \"lunke\",\n    \"fjols\",\n    \"sorbe\",\n    \"sveit\",\n    \"kurse\",\n    \"bumsa\",\n    \"prute\",\n    \"pudla\",\n    \"pøble\",\n    \"lysår\",\n    \"runsa\",\n    \"rådig\",\n    \"infus\",\n    \"stane\",\n    \"sulra\",\n    \"fåret\",\n    \"dekar\",\n    \"berga\",\n    \"letna\",\n    \"enkom\",\n    \"påver\",\n    \"hertz\",\n    \"solid\",\n    \"sjøku\",\n    \"døper\",\n    \"sadle\",\n    \"krept\",\n    \"sedat\",\n    \"utoen\",\n    \"utløe\",\n    \"knelt\",\n    \"pause\",\n    \"folke\",\n    \"jorde\",\n    \"bokår\",\n    \"åsdøl\",\n    \"tilså\",\n    \"skalp\",\n    \"agnet\",\n    \"opera\",\n    \"melta\",\n    \"pirse\",\n    \"inder\",\n    \"rauke\",\n    \"båing\",\n    \"vakte\",\n    \"edikt\",\n    \"nauet\",\n    \"knote\",\n    \"avind\",\n    \"polis\",\n    \"figur\",\n    \"barke\",\n    \"jærsk\",\n    \"fornt\",\n    \"suget\",\n    \"bonga\",\n    \"blitz\",\n    \"digel\",\n    \"nytid\",\n    \"egalt\",\n    \"krise\",\n    \"bruse\",\n    \"gjevt\",\n    \"maler\",\n    \"vegra\",\n    \"fisen\",\n    \"verga\",\n    \"krage\",\n    \"kvine\",\n    \"krasj\",\n    \"gipse\",\n    \"snart\",\n    \"trofe\",\n    \"smelt\",\n    \"sprak\",\n    \"slaur\",\n    \"tusje\",\n    \"bråka\",\n    \"prylt\",\n    \"tinga\",\n    \"kulsa\",\n    \"rumba\",\n    \"super\",\n    \"usøkt\",\n    \"viden\",\n    \"døyva\",\n    \"fløyt\",\n    \"grave\",\n    \"moret\",\n    \"beist\",\n    \"snøyd\",\n    \"tauer\",\n    \"drøst\",\n    \"lysna\",\n    \"fenga\",\n    \"nødig\",\n    \"krase\",\n    \"spolt\",\n    \"stryk\",\n    \"utina\",\n    \"knegd\",\n    \"bunad\",\n    \"maner\",\n    \"petum\",\n    \"bying\",\n    \"kråle\",\n    \"humra\",\n    \"gampe\",\n    \"aerob\",\n    \"depot\",\n    \"grend\",\n    \"visum\",\n    \"trafo\",\n    \"valpe\",\n    \"økset\",\n    \"hilda\",\n    \"lugnt\",\n    \"kuple\",\n    \"fekar\",\n    \"flyer\",\n    \"regna\",\n    \"punsj\",\n    \"pinka\",\n    \"mørke\",\n    \"rosta\",\n    \"skyve\",\n    \"fenad\",\n    \"grøft\",\n    \"tersa\",\n    \"savle\",\n    \"frabe\",\n    \"holdt\",\n    \"angel\",\n    \"runet\",\n    \"ulåst\",\n    \"styre\",\n    \"bryte\",\n    \"kulta\",\n    \"neigu\",\n    \"pjank\",\n    \"laure\",\n    \"sugen\",\n    \"tomsa\",\n    \"juice\",\n    \"utøse\",\n    \"faset\",\n    \"sefyr\",\n    \"borde\",\n    \"spink\",\n    \"trump\",\n    \"dolka\",\n    \"drift\",\n    \"døing\",\n    \"herom\",\n    \"lampe\",\n    \"lange\",\n    \"molde\",\n    \"putre\",\n    \"rikse\",\n    \"gipst\",\n    \"ufyse\",\n    \"syter\",\n    \"hamne\",\n    \"truse\",\n    \"padle\",\n    \"korte\",\n    \"kunst\",\n    \"drept\",\n    \"klyvd\",\n    \"fader\",\n    \"røvet\",\n    \"sløra\",\n    \"sulke\",\n    \"snøye\",\n    \"vodka\",\n    \"haike\",\n    \"vasle\",\n    \"øymål\",\n    \"rølpe\",\n    \"frukt\",\n    \"kluft\",\n    \"safet\",\n    \"sylfe\",\n    \"hærta\",\n    \"orkan\",\n    \"kable\",\n    \"sukle\",\n    \"unote\",\n    \"spilt\",\n    \"avkom\",\n    \"skeid\",\n    \"magre\",\n    \"våres\",\n    \"hovde\",\n    \"bisla\",\n    \"runge\",\n    \"strak\",\n    \"garni\",\n    \"lukte\",\n    \"primt\",\n    \"ruvet\",\n    \"slokt\",\n    \"imens\",\n    \"kviet\",\n    \"elgku\",\n    \"krypt\",\n    \"smile\",\n    \"aviso\",\n    \"envis\",\n    \"leita\",\n    \"lægre\",\n    \"niksa\",\n    \"strek\",\n    \"gevær\",\n    \"hvile\",\n    \"bråke\",\n    \"oljet\",\n    \"treak\",\n    \"raste\",\n    \"løpsk\",\n    \"børne\",\n    \"fønet\",\n    \"denar\",\n    \"gjønt\",\n    \"duske\",\n    \"knept\",\n    \"rangt\",\n    \"sjeik\",\n    \"hardt\",\n    \"kront\",\n    \"sklie\",\n    \"hølke\",\n    \"gjent\",\n    \"ugild\",\n    \"rusha\",\n    \"diske\",\n    \"conga\",\n    \"vange\",\n    \"rensa\",\n    \"strid\",\n    \"gaupe\",\n    \"geira\",\n    \"pælet\",\n    \"skyld\",\n    \"vitra\",\n    \"sulta\",\n    \"anket\",\n    \"bidra\",\n    \"svane\",\n    \"kargo\",\n    \"bugna\",\n    \"pedal\",\n    \"glemt\",\n    \"hjelm\",\n    \"adobe\",\n    \"bamse\",\n    \"vitje\",\n    \"robåt\",\n    \"støyp\",\n    \"hugal\",\n    \"sjark\",\n    \"dusje\",\n    \"måler\",\n    \"pushe\",\n    \"valgt\",\n    \"gyser\",\n    \"udrøy\",\n    \"bølga\",\n    \"beslå\",\n    \"savne\",\n    \"brite\",\n    \"vredt\",\n    \"hurpe\",\n    \"herpa\",\n    \"mynde\",\n    \"viten\",\n    \"bufar\",\n    \"vater\",\n    \"cargo\",\n    \"hater\",\n    \"nordi\",\n    \"flyte\",\n    \"grant\",\n    \"tøyla\",\n    \"limer\",\n    \"kauet\",\n    \"basme\",\n    \"jaret\",\n    \"sjikt\",\n    \"stura\",\n    \"køyet\",\n    \"kendo\",\n    \"spjær\",\n    \"bilkø\",\n    \"kobra\",\n    \"modna\",\n    \"sambo\",\n    \"bikse\",\n    \"seilt\",\n    \"knuta\",\n    \"sulre\",\n    \"tekno\",\n    \"børek\",\n    \"skeiv\",\n    \"gramt\",\n    \"kvise\",\n    \"ligne\",\n    \"forbi\",\n    \"spove\",\n    \"uling\",\n    \"bleik\",\n    \"dulma\",\n    \"kurie\",\n    \"roset\",\n    \"ljore\",\n    \"slakt\",\n    \"nøyte\",\n    \"hutre\",\n    \"blues\",\n    \"morsa\",\n    \"snakt\",\n    \"spane\",\n    \"kjøvd\",\n    \"spelt\",\n    \"banke\",\n    \"stare\",\n    \"uhørt\",\n    \"behag\",\n    \"kjast\",\n    \"ryent\",\n    \"tvang\",\n    \"borga\",\n    \"somle\",\n    \"herda\",\n    \"miljø\",\n    \"lomre\",\n    \"linke\",\n    \"blive\",\n    \"kelat\",\n    \"fluks\",\n    \"tvebu\",\n    \"verdt\",\n    \"dauet\",\n    \"kårde\",\n    \"svima\",\n    \"toårs\",\n    \"gruse\",\n    \"gåret\",\n    \"hvine\",\n    \"ulnet\",\n    \"brøyt\",\n    \"solet\",\n    \"gjært\",\n    \"pulse\",\n    \"djupt\",\n    \"kaset\",\n    \"flust\",\n    \"hetna\",\n    \"beita\",\n    \"hersa\",\n    \"hjupe\",\n    \"scora\",\n    \"vindt\",\n    \"breia\",\n    \"moare\",\n    \"skåne\",\n    \"ivret\",\n    \"sonde\",\n    \"støve\",\n    \"tjåke\",\n    \"trial\",\n    \"røfle\",\n    \"regnt\",\n    \"ident\",\n    \"kjønt\",\n    \"rulte\",\n    \"tinge\",\n    \"kavle\",\n    \"bauge\",\n    \"vitna\",\n    \"fager\",\n    \"gjøle\",\n    \"skrot\",\n    \"røske\",\n    \"rampe\",\n    \"helot\",\n    \"ublid\",\n    \"hovne\",\n    \"ivdøl\",\n    \"grima\",\n    \"knope\",\n    \"nylig\",\n    \"ritsj\",\n    \"mekra\",\n    \"døvet\",\n    \"bange\",\n    \"laset\",\n    \"reika\",\n    \"sauet\",\n    \"klort\",\n    \"skaft\",\n    \"hårdt\",\n    \"dorga\",\n    \"haspe\",\n    \"kåsør\",\n    \"håpet\",\n    \"lupin\",\n    \"gråte\",\n    \"nymfe\",\n    \"fråde\",\n    \"sjåka\",\n    \"stave\",\n    \"splid\",\n    \"arkiv\",\n    \"whist\",\n    \"feilt\",\n    \"doser\",\n    \"shunt\",\n    \"kåren\",\n    \"floet\",\n    \"vorte\",\n    \"sørve\",\n    \"fikta\",\n    \"gråne\",\n    \"match\",\n    \"nesta\",\n    \"gambe\",\n    \"lønsk\",\n    \"snegl\",\n    \"juksa\",\n    \"grein\",\n    \"husar\",\n    \"laget\",\n    \"morse\",\n    \"baret\",\n    \"endra\",\n    \"uvdøl\",\n    \"rayon\",\n    \"fjast\",\n    \"blåse\",\n    \"flåst\",\n    \"kulde\",\n    \"jævel\",\n    \"kvite\",\n    \"køing\",\n    \"pyton\",\n    \"tjern\",\n    \"velum\",\n    \"jalme\",\n    \"brysk\",\n    \"synda\",\n    \"finta\",\n    \"skyte\",\n    \"rasle\",\n    \"kalve\",\n    \"fælne\",\n    \"brand\",\n    \"merka\",\n    \"kurla\",\n    \"delja\",\n    \"perla\",\n    \"idest\",\n    \"sykla\",\n    \"halet\",\n    \"haste\",\n    \"lespt\",\n    \"skjen\",\n    \"tange\",\n    \"trask\",\n    \"sydpå\",\n    \"ølvom\",\n    \"klima\",\n    \"telna\",\n    \"pyore\",\n    \"dunse\",\n    \"frøst\",\n    \"water\",\n    \"lyska\",\n    \"gnurt\",\n    \"mahdi\",\n    \"åpnet\",\n    \"sadel\",\n    \"gytje\",\n    \"galen\",\n    \"løsna\",\n    \"utveg\",\n    \"levna\",\n    \"slura\",\n    \"salme\",\n    \"stima\",\n    \"danse\",\n    \"syver\",\n    \"røfla\",\n    \"nøyes\",\n    \"hvert\",\n    \"knipe\",\n    \"krita\",\n    \"skire\",\n    \"bonge\",\n    \"drink\",\n    \"yling\",\n    \"tømre\",\n    \"kanel\",\n    \"ormet\",\n    \"haing\",\n    \"frist\",\n    \"surfa\",\n    \"livna\",\n    \"pløst\",\n    \"baute\",\n    \"hvilt\",\n    \"himla\",\n    \"fusel\",\n    \"korna\",\n    \"baske\",\n    \"junta\",\n    \"slike\",\n    \"svipe\",\n    \"tukan\",\n    \"gnålt\",\n    \"løper\",\n    \"bæsja\",\n    \"havne\",\n    \"platå\",\n    \"døyet\",\n    \"snåva\",\n    \"kaldt\",\n    \"sløke\",\n    \"jenka\",\n    \"tymus\",\n    \"bylta\",\n    \"anget\",\n    \"væske\",\n    \"kjeng\",\n    \"fulgt\",\n    \"fluid\",\n    \"gaper\",\n    \"kjerv\",\n    \"raute\",\n    \"spare\",\n    \"showe\",\n    \"organ\",\n    \"bredt\",\n    \"flåer\",\n    \"hutle\",\n    \"kiper\",\n    \"stang\",\n    \"knips\",\n    \"geilt\",\n    \"låser\",\n    \"koran\",\n    \"nyveg\",\n    \"rødne\",\n    \"sølet\",\n    \"maste\",\n    \"kuvet\",\n    \"gomla\",\n    \"joika\",\n    \"slire\",\n    \"dunka\",\n    \"armod\",\n    \"sneip\",\n    \"sjaue\",\n    \"flane\",\n    \"mudre\",\n    \"utøve\",\n    \"frykt\",\n    \"buske\",\n    \"sikte\",\n    \"moder\",\n    \"spart\",\n    \"dativ\",\n    \"flyst\",\n    \"ovalt\",\n    \"føing\",\n    \"maori\",\n    \"bisna\",\n    \"skolp\",\n    \"tuska\",\n    \"pacet\",\n    \"penis\",\n    \"tying\",\n    \"volte\",\n    \"kumle\",\n    \"derpå\",\n    \"østpå\",\n    \"æring\",\n    \"pygme\",\n    \"triol\",\n    \"corny\",\n    \"karet\",\n    \"ferda\",\n    \"modal\",\n    \"heilt\",\n    \"pusle\",\n    \"junke\",\n    \"henry\",\n    \"såtid\",\n    \"vital\",\n    \"aktor\",\n    \"belma\",\n    \"blåst\",\n    \"bøyet\",\n    \"daske\",\n    \"grøst\",\n    \"fåent\",\n    \"tørna\",\n    \"trygd\",\n    \"jugla\",\n    \"korde\",\n    \"sikta\",\n    \"psyka\",\n    \"maule\",\n    \"slump\",\n    \"kusta\",\n    \"tøver\",\n    \"foran\",\n    \"anstå\",\n    \"dynka\",\n    \"mager\",\n    \"alpin\",\n    \"fragå\",\n    \"grena\",\n    \"liung\",\n    \"tonal\",\n    \"benzo\",\n    \"juble\",\n    \"sukla\",\n    \"humor\",\n    \"skult\",\n    \"bivre\",\n    \"feavl\",\n    \"oblik\",\n    \"bopel\",\n    \"rapid\",\n    \"curle\",\n    \"ufødt\",\n    \"roste\",\n    \"klast\",\n    \"krets\",\n    \"buorm\",\n    \"rufse\",\n    \"bohem\",\n    \"tråla\",\n    \"avise\",\n    \"choke\",\n    \"flæra\",\n    \"glafs\",\n    \"kopra\",\n    \"lemus\",\n    \"sådan\",\n    \"amøbe\",\n    \"spakt\",\n    \"filet\",\n    \"tiårs\",\n    \"koble\",\n    \"kroat\",\n    \"anløp\",\n    \"tipla\",\n    \"signa\",\n    \"pusta\",\n    \"løypt\",\n    \"måket\",\n    \"runse\",\n    \"rødme\",\n    \"lista\",\n    \"fikte\",\n    \"huket\",\n    \"moral\",\n    \"omhug\",\n    \"fiksa\",\n    \"akryl\",\n    \"byrgt\",\n    \"haiet\",\n    \"nidet\",\n    \"minka\",\n    \"helst\",\n    \"dying\",\n    \"toøre\",\n    \"liket\",\n    \"vekna\",\n    \"østre\",\n    \"høyet\",\n    \"lunge\",\n    \"øyder\",\n    \"lanke\",\n    \"lykte\",\n    \"bugne\",\n    \"dråpe\",\n    \"snork\",\n    \"vitne\",\n    \"seing\",\n    \"tango\",\n    \"kolin\",\n    \"svire\",\n    \"tvile\",\n    \"vaket\",\n    \"frast\",\n    \"natur\",\n    \"input\",\n    \"kruse\",\n    \"klovn\",\n    \"teori\",\n    \"palme\",\n    \"mansk\",\n    \"knust\",\n    \"pitla\",\n    \"båret\",\n    \"skøya\",\n    \"tvers\",\n    \"hvest\",\n    \"virus\",\n    \"åling\",\n    \"usælt\",\n    \"tarve\",\n    \"jævla\",\n    \"metan\",\n    \"steil\",\n    \"smolt\",\n    \"artig\",\n    \"nåtid\",\n    \"ferma\",\n    \"flask\",\n    \"furet\",\n    \"beint\",\n    \"fonem\",\n    \"flage\",\n    \"klemt\",\n    \"putla\",\n    \"slept\",\n    \"regal\",\n    \"lirka\",\n    \"gruet\",\n    \"hanse\",\n    \"krevd\",\n    \"sitre\",\n    \"svant\",\n    \"delta\",\n    \"dynge\",\n    \"luket\",\n    \"boing\",\n    \"melka\",\n    \"liret\",\n    \"kaste\",\n    \"flise\",\n    \"trema\",\n    \"pryle\",\n    \"bukla\",\n    \"kjøre\",\n    \"klant\",\n    \"lanse\",\n    \"sigen\",\n    \"fagne\",\n    \"haiku\",\n    \"fnist\",\n    \"småby\",\n    \"isblå\",\n    \"anker\",\n    \"biavl\",\n    \"kopla\",\n    \"nyvle\",\n    \"borte\",\n    \"bymål\",\n    \"hykle\",\n    \"fuska\",\n    \"skiva\",\n    \"snake\",\n    \"tjona\",\n    \"snurp\",\n    \"karte\",\n    \"gnirk\",\n    \"menig\",\n    \"vokta\",\n    \"klysa\",\n    \"utøva\",\n    \"avsig\",\n    \"hyret\",\n    \"spøle\",\n    \"cover\",\n    \"rouge\",\n    \"syten\",\n    \"loing\",\n    \"særbu\",\n    \"humpa\",\n    \"urøkt\",\n    \"løynd\",\n    \"tinda\",\n    \"bryst\",\n    \"bisne\",\n    \"jukse\",\n    \"omsyn\",\n    \"snikt\",\n    \"fakte\",\n    \"knota\",\n    \"sørga\",\n    \"dorsk\",\n    \"feita\",\n    \"garde\",\n    \"lensa\",\n    \"tyngd\",\n    \"umake\",\n    \"vedta\",\n    \"yrhet\",\n    \"final\",\n    \"hamse\",\n    \"pinse\",\n    \"først\",\n    \"dampe\",\n    \"tørne\",\n    \"rimet\",\n    \"burot\",\n    \"felga\",\n    \"byste\",\n    \"heist\",\n    \"truge\",\n    \"takle\",\n    \"ptroa\",\n    \"persa\",\n    \"setra\",\n    \"sløyt\",\n    \"gøyal\",\n    \"glist\",\n    \"lingo\",\n    \"krymp\",\n    \"pista\",\n    \"konge\",\n    \"hyler\",\n    \"mesan\",\n    \"kjæle\",\n    \"sjoga\",\n    \"halvt\",\n    \"krave\",\n    \"tuske\",\n    \"vitsa\",\n    \"bufre\",\n    \"sepia\",\n    \"doyen\",\n    \"vinke\",\n    \"såing\",\n    \"tobis\",\n    \"ågret\",\n    \"fikse\",\n    \"hamre\",\n    \"somla\",\n    \"gærne\",\n    \"sjøbu\",\n    \"sødme\",\n    \"buset\",\n    \"koset\",\n    \"bunka\",\n    \"jorte\",\n    \"kjone\",\n    \"myret\",\n    \"binge\",\n    \"doven\",\n    \"kåret\",\n    \"midla\",\n    \"graut\",\n    \"kater\",\n    \"keton\",\n    \"rifle\",\n    \"jevna\",\n    \"burde\",\n    \"farve\",\n    \"lengt\",\n    \"veita\",\n    \"meska\",\n    \"sløre\",\n    \"beisa\",\n    \"blest\",\n    \"daler\",\n    \"luret\",\n    \"isbre\",\n    \"jubel\",\n    \"båset\",\n    \"snopa\",\n    \"trake\",\n    \"dopet\",\n    \"bakst\",\n    \"klyse\",\n    \"skant\",\n    \"trøye\",\n    \"higen\",\n    \"snaut\",\n    \"hedøl\",\n    \"utedo\",\n    \"smalt\",\n    \"valte\",\n    \"været\",\n    \"ynket\",\n    \"betro\",\n    \"horse\",\n    \"blits\",\n    \"banko\",\n    \"nista\",\n    \"porøs\",\n    \"karib\",\n    \"snopt\",\n    \"tjukn\",\n    \"bøyle\",\n    \"tufse\",\n    \"yster\",\n    \"samrå\",\n    \"aling\",\n    \"ankre\",\n    \"bukle\",\n    \"grint\",\n    \"keivt\",\n    \"rytme\",\n    \"røpet\",\n    \"spurt\",\n    \"tømra\",\n    \"våtne\",\n    \"glace\",\n    \"hjelp\",\n    \"manus\",\n    \"apoge\",\n    \"rikta\",\n    \"glane\",\n    \"jumpe\",\n    \"rekyl\",\n    \"kreft\",\n    \"enorm\",\n    \"sprog\",\n    \"brust\",\n    \"klamp\",\n    \"pirke\",\n    \"skove\",\n    \"byråd\",\n    \"tanks\",\n    \"ølrik\",\n    \"hendt\",\n    \"feila\",\n    \"frest\",\n    \"havål\",\n    \"kuben\",\n    \"krime\",\n    \"laken\",\n    \"senka\",\n    \"hvite\",\n    \"kluns\",\n    \"glore\",\n    \"crazy\",\n    \"plent\",\n    \"fatøl\",\n    \"valen\",\n    \"måker\",\n    \"spekt\",\n    \"dempa\",\n    \"gløst\",\n    \"ideal\",\n    \"kovne\",\n    \"derby\",\n    \"bakpå\",\n    \"alken\",\n    \"saget\",\n    \"slekt\",\n    \"fryda\",\n    \"melon\",\n    \"heros\",\n    \"kjeda\",\n    \"gøyet\",\n    \"hoiet\",\n    \"tyføs\",\n    \"gunst\",\n    \"truen\",\n    \"blære\",\n    \"rande\",\n    \"ildet\",\n    \"prins\",\n    \"ganet\",\n    \"snåpt\",\n    \"bufra\",\n    \"simle\",\n    \"longs\",\n    \"styra\",\n    \"tamse\",\n    \"nybær\",\n    \"tøysa\",\n    \"primo\",\n    \"drøyt\",\n    \"kolbe\",\n    \"dulta\",\n    \"glipe\",\n    \"hodøl\",\n    \"smake\",\n    \"lenga\",\n    \"bingo\",\n    \"glort\",\n    \"stole\",\n    \"omegn\",\n    \"glima\",\n    \"jaord\",\n    \"tehus\",\n    \"usyra\",\n    \"hermt\",\n    \"jelka\",\n    \"kabel\",\n    \"kediv\",\n    \"quilt\",\n    \"ruket\",\n    \"veida\",\n    \"rakle\",\n    \"nisje\",\n    \"stump\",\n    \"flora\",\n    \"flusk\",\n    \"fjære\",\n    \"leikt\",\n    \"piske\",\n    \"krona\",\n    \"taper\",\n    \"hvalp\",\n    \"bruna\",\n    \"gruve\",\n    \"repos\",\n    \"prost\",\n    \"ubedt\",\n    \"jålet\",\n    \"mange\",\n    \"krote\",\n    \"spire\",\n    \"gifta\",\n    \"bulke\",\n    \"skjær\",\n    \"herav\",\n    \"ægide\",\n    \"folna\",\n    \"gøyst\",\n    \"kjølt\",\n    \"uglet\",\n    \"føyke\",\n    \"kabin\",\n    \"cashe\",\n    \"gulet\",\n    \"liten\",\n    \"skapt\",\n    \"braut\",\n    \"uroet\",\n    \"bunta\",\n    \"flist\",\n    \"rysja\",\n    \"batch\",\n    \"frekt\",\n    \"stade\",\n    \"sågar\",\n    \"bakol\",\n    \"jamre\",\n    \"meint\",\n    \"solur\",\n    \"flakt\",\n    \"tjuva\",\n    \"bykst\",\n    \"negla\",\n    \"vigla\",\n    \"poret\",\n    \"gimpa\",\n    \"fåing\",\n    \"stige\",\n    \"uglad\",\n    \"kipen\",\n    \"smula\",\n    \"drone\",\n    \"gresk\",\n    \"loden\",\n    \"viska\",\n    \"credo\",\n    \"skred\",\n    \"unikt\",\n    \"vekst\",\n    \"komet\",\n    \"bløte\",\n    \"såfrø\",\n    \"boldt\",\n    \"aspik\",\n    \"alder\",\n    \"sterk\",\n    \"ruset\",\n    \"radio\",\n    \"drank\",\n    \"sprik\",\n    \"maksi\",\n    \"ratle\",\n    \"loran\",\n    \"nedom\",\n    \"kuret\",\n    \"levra\",\n    \"knapt\",\n    \"tipse\",\n    \"fukta\",\n    \"harpy\",\n    \"lunch\",\n    \"keram\",\n    \"tispe\",\n    \"dirka\",\n    \"tråda\",\n    \"flømt\",\n    \"gråle\",\n    \"påsyn\",\n    \"klyve\",\n    \"salig\",\n    \"yrent\",\n    \"kuing\",\n    \"ørska\",\n    \"grumt\",\n    \"kodet\",\n    \"plagd\",\n    \"molda\",\n    \"holne\",\n    \"javel\",\n    \"joule\",\n    \"jumbo\",\n    \"omløp\",\n    \"knest\",\n    \"stamp\",\n    \"rukla\",\n    \"hopet\",\n    \"kvart\",\n    \"borge\",\n    \"gæler\",\n    \"gispe\",\n    \"jevnt\",\n    \"gæren\",\n    \"harve\",\n    \"rabid\",\n    \"isbar\",\n    \"håret\",\n    \"bogne\",\n    \"borsj\",\n    \"pacer\",\n    \"ildne\",\n    \"sprøe\",\n    \"kjemt\",\n    \"småfe\",\n    \"utlån\",\n    \"omfar\",\n    \"boksa\",\n    \"adlet\",\n    \"favne\",\n    \"flink\",\n    \"kause\",\n    \"likør\",\n    \"byrde\",\n    \"sipet\",\n    \"talge\",\n    \"orget\",\n    \"forgi\",\n    \"nyrik\",\n    \"krapt\",\n    \"logra\",\n    \"åndet\",\n    \"firma\",\n    \"kalun\",\n    \"glipt\",\n    \"klums\",\n    \"smult\",\n    \"ratsj\",\n    \"mildt\",\n    \"kulør\",\n    \"sivet\",\n    \"covre\",\n    \"flaut\",\n    \"skoda\",\n    \"bakom\",\n    \"flens\",\n    \"hagel\",\n    \"bisak\",\n    \"rubel\",\n    \"råtev\",\n    \"nuvet\",\n    \"sider\",\n    \"duvet\",\n    \"skåte\",\n    \"skjev\",\n    \"åpent\",\n    \"djerv\",\n    \"flest\",\n    \"gjurt\",\n    \"såret\",\n    \"medio\",\n    \"tyvjo\",\n    \"ulike\",\n    \"osean\",\n    \"bigam\",\n    \"prent\",\n    \"helvt\",\n    \"mikse\",\n    \"rodel\",\n    \"skral\",\n    \"usæle\",\n    \"leska\",\n    \"dalit\",\n    \"utbre\",\n    \"kupla\",\n    \"vipse\",\n    \"kimet\",\n    \"hønse\",\n    \"sløve\",\n    \"mykne\",\n    \"venta\",\n    \"vågal\",\n    \"dreng\",\n    \"niste\",\n    \"fråda\",\n    \"visle\",\n    \"skort\",\n    \"gufse\",\n    \"skrue\",\n    \"dinar\",\n    \"judas\",\n    \"hovna\",\n    \"idket\",\n    \"lugna\",\n    \"holka\",\n    \"smart\",\n    \"radon\",\n    \"bymur\",\n    \"nygle\",\n    \"skipe\",\n    \"isfot\",\n    \"snåle\",\n    \"vimsa\",\n    \"farsi\",\n    \"galon\",\n    \"bojar\",\n    \"kjælt\",\n    \"gjelt\",\n    \"blund\",\n    \"slark\",\n    \"sydet\",\n    \"sinka\",\n    \"posen\",\n    \"naivt\",\n    \"øksle\",\n    \"vikta\",\n    \"fenol\",\n    \"fluor\",\n    \"giret\",\n    \"knyst\",\n    \"doble\",\n    \"tilrå\",\n    \"tukle\",\n    \"bisle\",\n    \"kløyv\",\n    \"sovet\",\n    \"lufta\",\n    \"oktan\",\n    \"espri\",\n    \"rombe\",\n    \"fyord\",\n    \"seraf\",\n    \"stuer\",\n    \"bestå\",\n    \"joike\",\n    \"behov\",\n    \"båren\",\n    \"times\",\n    \"runde\",\n    \"bleka\",\n    \"domra\",\n    \"piska\",\n    \"røyke\",\n    \"fisle\",\n    \"årsak\",\n    \"osman\",\n    \"tesil\",\n    \"kosta\",\n    \"røynd\",\n    \"loget\",\n    \"flaue\",\n    \"syrin\",\n    \"vispa\",\n    \"pilot\",\n    \"kabyl\",\n    \"anbud\",\n    \"føken\",\n    \"krust\",\n    \"snøre\",\n    \"svakt\",\n    \"hekto\",\n    \"virke\",\n    \"enrom\",\n    \"vable\",\n    \"bokne\",\n    \"karde\",\n    \"slarv\",\n    \"raske\",\n    \"gebyr\",\n    \"skite\",\n    \"svært\",\n    \"umalt\",\n    \"åsted\",\n    \"avund\",\n    \"røyka\",\n    \"sukra\",\n    \"vokte\",\n    \"genom\",\n    \"runga\",\n    \"kvant\",\n    \"agurk\",\n    \"nøler\",\n    \"kleiv\",\n    \"moing\",\n    \"radom\",\n    \"bolna\",\n    \"osing\",\n    \"tufsa\",\n    \"mista\",\n    \"cykel\",\n    \"lugne\",\n    \"slipe\",\n    \"bisol\",\n    \"følge\",\n    \"folda\",\n    \"hånet\",\n    \"vitja\",\n    \"verft\",\n    \"skval\",\n    \"posta\",\n    \"hymne\",\n    \"ståke\",\n    \"kvarg\",\n    \"kjest\",\n    \"glora\",\n    \"skvip\",\n    \"hanke\",\n    \"snoke\",\n    \"borat\",\n    \"grunk\",\n    \"argot\",\n    \"veikt\",\n    \"løyet\",\n    \"nyhet\",\n    \"nekta\",\n    \"godta\",\n    \"spirt\",\n    \"diset\",\n    \"gromt\",\n    \"ishud\",\n    \"fjågt\",\n    \"råket\",\n    \"gamet\",\n    \"rådet\",\n    \"jugle\",\n    \"betla\",\n    \"fylde\",\n    \"surfe\",\n    \"jodla\",\n    \"sveip\",\n    \"valme\",\n    \"herkt\",\n    \"øying\",\n    \"løyvd\",\n    \"tårne\",\n    \"fjase\",\n    \"dumpe\",\n    \"røket\",\n    \"esing\",\n    \"kløvd\",\n    \"nidel\",\n    \"runda\",\n    \"vanke\",\n    \"feira\",\n    \"lusen\",\n    \"pjalt\",\n    \"nugat\",\n    \"grynt\",\n    \"koste\",\n    \"puste\",\n    \"yndet\",\n    \"lager\",\n    \"slide\",\n    \"ulevd\",\n    \"usyrt\",\n    \"sutre\",\n    \"chief\",\n    \"ljome\",\n    \"laste\",\n    \"spedt\",\n    \"pleia\",\n    \"fabel\",\n    \"furie\",\n    \"hiren\",\n    \"tanke\",\n    \"plast\",\n    \"smudi\",\n    \"elska\",\n    \"mudra\",\n    \"sover\",\n    \"fasit\",\n    \"jamne\",\n    \"belja\",\n    \"breka\",\n    \"gitre\",\n    \"pilar\",\n    \"forut\",\n    \"merla\",\n    \"puset\",\n    \"baron\",\n    \"rubin\",\n    \"dorge\",\n    \"nøste\",\n    \"påske\",\n    \"tenor\",\n    \"veidn\",\n    \"øytur\",\n    \"kvote\",\n    \"spike\",\n    \"banjo\",\n    \"bykse\",\n    \"tunge\",\n    \"valse\",\n    \"ønskt\",\n    \"kalif\",\n    \"smøye\",\n    \"kimse\",\n    \"skita\",\n    \"brifa\",\n    \"drilt\",\n    \"nærme\",\n    \"stuka\",\n    \"boler\",\n    \"usagt\",\n    \"skage\",\n    \"draug\",\n    \"molte\",\n    \"aperi\",\n    \"finke\",\n    \"omlag\",\n    \"stork\",\n    \"svolk\",\n    \"vinge\",\n    \"jamte\",\n    \"blond\",\n    \"ulønt\",\n    \"gremt\",\n    \"anger\",\n    \"ankel\",\n    \"utdør\",\n    \"aking\",\n    \"purke\",\n    \"naskt\",\n    \"squaw\",\n    \"agert\",\n    \"utrop\",\n    \"flukt\",\n    \"pilta\",\n    \"hugst\",\n    \"fjelg\",\n    \"vaier\",\n    \"praie\",\n    \"hylse\",\n    \"fnyst\",\n    \"tyved\",\n    \"usona\",\n    \"sting\",\n    \"trade\",\n    \"klauv\",\n    \"myrda\",\n    \"skaut\",\n    \"fekta\",\n    \"gylne\",\n    \"butid\",\n    \"vagle\",\n    \"rispe\",\n    \"krige\",\n    \"voile\",\n    \"linje\",\n    \"geipa\",\n    \"skrei\",\n    \"buska\",\n    \"metyl\",\n    \"diner\",\n    \"mykna\",\n    \"sabel\",\n    \"siket\",\n    \"ringa\",\n    \"ubona\",\n    \"umåte\",\n    \"våret\",\n    \"pavet\",\n    \"dusør\",\n    \"vimet\",\n    \"aktin\",\n    \"knert\",\n    \"skump\",\n    \"trace\",\n    \"dryge\",\n    \"luten\",\n    \"bjerk\",\n    \"forby\",\n    \"jeans\",\n    \"jøkel\",\n    \"bisam\",\n    \"flesk\",\n    \"greid\",\n    \"ladet\",\n    \"støya\",\n    \"kursa\",\n    \"bader\",\n    \"dåret\",\n    \"pirat\",\n    \"tjora\",\n    \"hevna\",\n    \"khmer\",\n    \"vrakt\",\n    \"ruske\",\n    \"motiv\",\n    \"rufsa\",\n    \"teipa\",\n    \"iguan\",\n    \"rakne\",\n    \"søpla\",\n    \"knute\",\n    \"vaker\",\n    \"pryda\",\n    \"røynt\",\n    \"besna\",\n    \"folka\",\n    \"utfor\",\n    \"pølse\",\n    \"dovna\",\n    \"lagre\",\n    \"emoji\",\n    \"gysja\",\n    \"øynet\",\n    \"taime\",\n    \"armet\",\n    \"angre\",\n    \"tukla\",\n    \"holna\",\n    \"dysta\",\n    \"prima\",\n    \"fancy\",\n    \"pryde\",\n    \"talje\",\n    \"folde\",\n    \"høyår\",\n    \"sjukt\",\n    \"unåde\",\n    \"turve\",\n    \"gøyse\",\n    \"tusja\",\n    \"lande\",\n    \"ølost\",\n    \"brukt\",\n    \"lodje\",\n    \"grime\",\n    \"sonet\",\n    \"knase\",\n    \"paret\",\n    \"gispa\",\n    \"piste\",\n    \"fjord\",\n    \"knoga\",\n    \"tevla\",\n    \"glire\",\n    \"selot\",\n    \"koret\",\n    \"tværa\",\n    \"føles\",\n    \"bikta\",\n    \"kniva\",\n    \"mynta\",\n    \"træla\",\n    \"forst\",\n    \"brake\",\n    \"smilt\",\n    \"maget\",\n    \"flirt\",\n    \"fengt\",\n    \"hipet\",\n    \"kremt\",\n    \"tjeld\",\n    \"desto\",\n    \"mugne\",\n    \"slind\",\n    \"ønske\",\n    \"pokra\",\n    \"myose\",\n    \"bogna\",\n    \"joker\",\n    \"kefir\",\n    \"deist\",\n    \"marin\",\n    \"salte\",\n    \"aksel\",\n    \"stime\",\n    \"telgd\",\n    \"frosk\",\n    \"medoc\",\n    \"utved\",\n    \"vemod\",\n    \"kopen\",\n    \"bunke\",\n    \"fotgå\",\n    \"moske\",\n    \"naske\",\n    \"poset\",\n    \"stive\",\n    \"rosen\",\n    \"junge\",\n    \"klipe\",\n    \"avbud\",\n    \"væpna\",\n    \"røyst\",\n    \"dyrke\",\n    \"rikle\",\n    \"bydel\",\n    \"tidel\",\n    \"luing\",\n    \"fikle\",\n    \"rusta\",\n    \"høvla\",\n    \"mogul\",\n    \"geist\",\n    \"karpe\",\n    \"godte\",\n    \"sløva\",\n    \"løsne\",\n    \"lyste\",\n    \"drake\",\n    \"jafse\",\n    \"vaset\",\n    \"vigle\",\n    \"skrov\",\n    \"terga\",\n    \"bevis\",\n    \"tegna\",\n    \"fiket\",\n    \"røyna\",\n    \"vakle\",\n    \"bunte\",\n    \"arvet\",\n    \"krålt\",\n    \"slyet\",\n    \"idømt\",\n    \"slurv\",\n    \"dalke\",\n    \"tynge\",\n    \"kolet\",\n    \"snåve\",\n    \"teing\",\n    \"kompe\",\n    \"dånet\",\n    \"lybsk\",\n    \"snute\",\n    \"torve\",\n    \"uhyre\",\n    \"fakle\",\n    \"plask\",\n    \"lempa\",\n    \"pesto\",\n    \"gimpe\",\n    \"omgås\",\n    \"plire\",\n    \"glove\",\n    \"klive\",\n    \"bulet\",\n    \"dingo\",\n    \"hoste\",\n    \"kvega\",\n    \"meson\",\n    \"nålys\",\n    \"ramse\",\n    \"redig\",\n    \"reiva\",\n    \"trope\",\n    \"alvor\",\n    \"kofte\",\n    \"fiska\",\n    \"brynt\",\n    \"umbra\",\n    \"klode\",\n    \"bolne\",\n    \"fleip\",\n    \"knisl\",\n    \"stake\",\n    \"kvare\",\n    \"naget\",\n    \"velsk\",\n    \"hjalt\",\n    \"uklar\",\n    \"pauke\",\n    \"grøde\",\n    \"råmen\",\n    \"stavn\",\n    \"væpne\",\n    \"vyrkt\",\n    \"sykne\",\n    \"løfte\",\n    \"forma\",\n    \"grjot\",\n    \"øring\",\n    \"dalbu\",\n    \"funka\",\n    \"telys\",\n    \"avers\",\n    \"hacke\",\n    \"høyst\",\n    \"sioux\",\n    \"marsj\",\n    \"yngre\",\n    \"ørent\",\n    \"hirse\",\n    \"vakne\",\n    \"cirka\",\n    \"dølge\",\n    \"homse\",\n    \"hvint\",\n    \"malte\",\n    \"salto\",\n    \"sogne\",\n    \"uføre\",\n    \"grist\",\n    \"synge\",\n    \"nåtla\",\n    \"ilder\",\n    \"orket\",\n    \"volum\",\n    \"stilk\",\n    \"yngel\",\n    \"covra\",\n    \"video\",\n    \"muset\",\n    \"odiøs\",\n    \"verka\",\n    \"mørka\",\n    \"førti\",\n    \"valne\",\n    \"klona\",\n    \"sendt\",\n    \"pudre\",\n    \"heksa\",\n    \"klavd\",\n    \"krafs\",\n    \"skøye\",\n    \"smukt\",\n    \"maske\",\n    \"nagle\",\n    \"lepra\",\n    \"basun\",\n    \"svamp\",\n    \"sælda\",\n    \"kravl\",\n    \"bulna\",\n    \"folie\",\n    \"trevl\",\n    \"hukre\",\n    \"isbor\",\n    \"kålet\",\n    \"bandy\",\n    \"serai\",\n    \"omveg\",\n    \"knurv\",\n    \"kleid\",\n    \"sorti\",\n    \"lespa\",\n    \"svikt\",\n    \"meita\",\n    \"skåre\",\n    \"vørde\",\n    \"beisk\",\n    \"tusle\",\n    \"samle\",\n    \"tipsa\",\n    \"klype\",\n    \"reist\",\n    \"røfte\",\n    \"tryne\",\n    \"taske\",\n    \"ranch\",\n    \"atsjo\",\n    \"blota\",\n    \"alter\",\n    \"dynga\",\n    \"image\",\n    \"jækel\",\n    \"kvint\",\n    \"leing\",\n    \"mitra\",\n    \"modøl\",\n    \"mulda\",\n    \"segla\",\n    \"glise\",\n    \"smurt\",\n    \"turbo\",\n    \"tyfus\",\n    \"korps\",\n    \"avslå\",\n    \"megla\",\n    \"sound\",\n    \"kuøye\",\n    \"trips\",\n    \"beskt\",\n    \"nusla\",\n    \"remsa\",\n    \"verpt\",\n    \"fjert\",\n    \"halte\",\n    \"høyna\",\n    \"kujon\",\n    \"lurve\",\n    \"rutle\",\n    \"fyrop\",\n    \"safte\",\n    \"knive\",\n    \"orden\",\n    \"kvept\",\n    \"solgt\",\n    \"urein\",\n    \"glømt\",\n    \"jærbu\",\n    \"årdøl\",\n    \"alved\",\n    \"grise\",\n    \"syrna\",\n    \"plate\",\n    \"kiler\",\n    \"leira\",\n    \"piren\",\n    \"drita\",\n    \"sirup\",\n    \"bowle\",\n    \"volde\",\n    \"lyske\",\n    \"fosna\",\n    \"dvale\",\n    \"sigma\",\n    \"bause\",\n    \"tjæra\",\n    \"undas\",\n    \"trone\",\n    \"knegå\",\n    \"diare\",\n    \"takse\",\n    \"matos\",\n    \"snope\",\n    \"vikar\",\n    \"aldri\",\n    \"grums\",\n    \"sepoy\",\n    \"story\",\n    \"vifta\",\n    \"øving\",\n    \"falby\",\n    \"seint\",\n    \"opakt\",\n    \"grisk\",\n    \"himle\",\n    \"høker\",\n    \"lødig\",\n    \"maiet\",\n    \"panty\",\n    \"visla\",\n    \"yngst\",\n    \"kyrie\",\n    \"sirat\",\n    \"brune\",\n    \"ølsbu\",\n    \"komse\",\n    \"being\",\n    \"skåld\",\n    \"vekta\",\n    \"miste\",\n    \"trale\",\n    \"heint\",\n    \"mørne\",\n    \"sying\",\n    \"kjøld\",\n    \"vrang\",\n    \"avgud\",\n    \"situp\",\n    \"hinte\",\n    \"umålt\",\n    \"sundt\",\n    \"bedra\",\n    \"blaut\",\n    \"sprut\",\n    \"støle\",\n    \"slank\",\n    \"nærig\",\n    \"fordi\",\n    \"svait\",\n    \"høres\",\n    \"jager\",\n    \"avlyd\",\n    \"ynget\",\n    \"kveis\",\n    \"tøyse\",\n    \"skute\",\n    \"matkø\",\n    \"laser\",\n    \"geipt\",\n    \"manko\",\n    \"kjæte\",\n    \"bøkle\",\n    \"humpe\",\n    \"knuvl\",\n    \"efugl\",\n    \"fylkt\",\n    \"ifylt\",\n    \"rocke\",\n    \"krite\",\n    \"skånt\",\n    \"ulket\",\n    \"svime\",\n    \"mjøla\",\n    \"linde\",\n    \"ihuga\",\n    \"pulje\",\n    \"vørdt\",\n    \"koldt\",\n    \"råtna\",\n    \"greit\",\n    \"gulne\",\n    \"gault\",\n    \"yrket\",\n    \"ugrei\",\n    \"vikte\",\n    \"snavl\",\n    \"ufiks\",\n    \"lavet\",\n    \"mjølt\",\n    \"breid\",\n    \"brise\",\n    \"purka\",\n    \"næret\",\n    \"brøle\",\n    \"gjord\",\n    \"fryde\",\n    \"kjømd\",\n    \"dengt\",\n    \"krusa\",\n    \"løyen\",\n    \"pater\",\n    \"ploge\",\n    \"sørva\",\n    \"mulde\",\n    \"rysje\",\n    \"balje\",\n    \"våkne\",\n    \"slurp\",\n    \"vefta\",\n    \"åverk\",\n    \"skygt\",\n    \"pusla\",\n    \"reint\",\n    \"pjusk\",\n    \"farin\",\n    \"stega\",\n    \"pælma\",\n    \"oralt\",\n    \"grålt\",\n    \"plint\",\n    \"anslå\",\n    \"asket\",\n    \"skolm\",\n    \"snike\",\n    \"tvare\",\n    \"smeik\",\n    \"ordna\",\n    \"valør\",\n    \"myket\",\n    \"uheil\",\n    \"skald\",\n    \"kjipt\",\n    \"støva\",\n    \"joner\",\n    \"skrin\",\n    \"øvrig\",\n    \"blåis\",\n    \"ruste\",\n    \"klase\",\n    \"tymin\",\n    \"dolke\",\n    \"framt\",\n    \"gnist\",\n    \"sørpe\",\n    \"derav\",\n    \"befri\",\n    \"børsa\",\n    \"poker\",\n    \"ørtug\",\n    \"byget\",\n    \"søren\",\n    \"låret\",\n    \"herpå\",\n    \"norsk\",\n    \"folne\",\n    \"særbo\",\n    \"tolar\",\n    \"våpen\",\n    \"ledig\",\n    \"lumen\",\n    \"bynær\",\n    \"skipa\",\n    \"fryse\",\n    \"hutra\",\n    \"kreps\",\n    \"brånt\",\n    \"endog\",\n    \"jøyet\",\n    \"terpa\",\n    \"faite\",\n    \"krype\",\n    \"kveld\",\n    \"urtid\",\n    \"gråna\",\n    \"bøkla\",\n    \"huiet\",\n    \"konte\",\n    \"undra\",\n    \"kisle\",\n    \"realt\",\n    \"surna\",\n    \"ødsel\",\n    \"ødsle\",\n    \"frisk\",\n    \"nuska\",\n    \"mykis\",\n    \"bendt\",\n    \"gasje\",\n    \"kinga\",\n    \"skymt\",\n    \"viske\",\n    \"bacon\",\n    \"bokse\",\n    \"dunga\",\n    \"dveil\",\n    \"snipe\",\n    \"vrien\",\n    \"stupa\",\n    \"bumse\",\n    \"vræle\",\n    \"beina\",\n    \"knist\",\n    \"tiner\",\n    \"grovt\",\n    \"møtes\",\n    \"rutla\",\n    \"slant\",\n    \"links\",\n    \"sykle\",\n    \"trabi\",\n    \"sinet\",\n    \"tumla\",\n    \"sjalu\",\n    \"sleiv\",\n    \"spray\",\n    \"tonus\",\n    \"botna\",\n    \"husly\",\n    \"smurf\",\n    \"berta\",\n    \"kumla\",\n    \"svalt\",\n    \"gehør\",\n    \"klien\",\n    \"ampel\",\n    \"harsk\",\n    \"dorme\",\n    \"hilse\",\n    \"fiken\",\n    \"snupt\",\n    \"sobel\",\n    \"boget\",\n    \"flush\",\n    \"gyvel\",\n    \"bevra\",\n    \"hjula\",\n    \"svike\",\n    \"arisk\",\n    \"quart\",\n    \"raskt\",\n    \"modul\",\n    \"snile\",\n    \"karve\",\n    \"skåle\",\n    \"gaide\",\n    \"gjura\",\n    \"ligna\",\n    \"livet\",\n    \"toven\",\n    \"vulka\",\n    \"kisla\",\n    \"opart\",\n    \"leksa\",\n    \"iglet\",\n    \"prøvd\",\n    \"riste\",\n    \"farte\",\n    \"sjuke\",\n    \"utleg\",\n    \"uremi\",\n    \"opium\",\n    \"smøyd\",\n    \"umiak\",\n    \"åsabu\",\n    \"liste\",\n    \"midle\",\n    \"moset\",\n    \"valid\",\n    \"kjedt\",\n    \"utvær\",\n    \"skuet\",\n    \"ardet\",\n    \"ljoma\",\n    \"bonus\",\n    \"skurt\",\n    \"kjase\",\n    \"væter\",\n    \"nodul\",\n    \"svein\",\n    \"lumsk\",\n    \"knuga\",\n    \"lafte\",\n    \"brems\",\n    \"knort\",\n    \"sopen\",\n    \"breis\",\n    \"løpet\",\n    \"gnome\",\n    \"korne\",\n    \"fidus\",\n    \"flare\",\n    \"diket\",\n    \"dråpa\",\n    \"klein\",\n    \"kvilt\",\n    \"røkta\",\n    \"pudra\",\n    \"skura\",\n    \"anemi\",\n    \"stein\",\n    \"skygd\",\n    \"budøl\",\n    \"svint\",\n    \"ugift\",\n    \"hofte\",\n    \"ærdun\",\n    \"dunke\",\n    \"gleda\",\n    \"halse\",\n    \"hyrde\",\n    \"bukte\",\n    \"koder\",\n    \"mugna\",\n    \"vonet\",\n    \"kelim\",\n    \"krynt\",\n    \"avrop\",\n    \"formå\",\n    \"tenår\",\n    \"høkre\",\n    \"tjone\",\n    \"grusk\",\n    \"puner\",\n    \"stand\",\n    \"vaing\",\n    \"træle\",\n    \"velta\",\n    \"spøke\",\n    \"nobel\",\n    \"gante\",\n    \"mufti\",\n    \"fauke\",\n    \"gærna\",\n    \"omsut\",\n    \"svaie\",\n    \"spølt\",\n    \"musak\",\n    \"glime\",\n    \"farge\",\n    \"gande\",\n    \"gropa\",\n    \"miksa\",\n    \"stram\",\n    \"tomse\",\n    \"vadet\",\n    \"likna\",\n    \"jumpa\",\n    \"fuget\",\n    \"tokar\",\n    \"løfta\",\n    \"rijal\",\n    \"glant\",\n    \"salve\",\n    \"varpe\",\n    \"kvide\",\n    \"ønska\",\n    \"tiøre\",\n    \"botid\",\n    \"jorda\",\n    \"lumpa\",\n    \"årvei\",\n    \"turne\",\n    \"kamel\",\n    \"snålt\",\n    \"lovet\",\n    \"prosa\",\n    \"høgre\",\n    \"sneka\",\n    \"boret\",\n    \"plikt\",\n    \"pilke\",\n    \"serum\",\n    \"kufor\",\n    \"duket\",\n    \"nufst\",\n    \"sålda\",\n    \"filur\",\n    \"flekt\",\n    \"vigør\",\n    \"råing\",\n    \"dilte\",\n    \"usont\",\n    \"sovne\",\n    \"glimt\",\n    \"tasle\",\n    \"maile\",\n    \"speil\",\n    \"medgi\",\n    \"fondy\",\n    \"meldt\",\n    \"mengt\",\n    \"yring\",\n    \"aveny\",\n    \"nøret\",\n    \"holke\",\n    \"ister\",\n    \"gløda\",\n    \"snaue\",\n    \"øding\",\n    \"drite\",\n    \"false\",\n    \"skriv\",\n    \"rapet\",\n    \"røyte\",\n    \"aldre\",\n    \"ulært\",\n    \"vålet\",\n    \"knode\",\n    \"ståka\",\n    \"fikla\",\n    \"løsgi\",\n    \"ordne\",\n    \"orgie\",\n    \"litas\",\n    \"ruska\",\n    \"fiske\",\n    \"luska\",\n    \"spøkt\",\n    \"vedbu\",\n    \"døset\",\n    \"niårs\",\n    \"kulet\",\n    \"short\",\n    \"saute\",\n    \"pasje\",\n    \"mater\",\n    \"naust\",\n    \"spora\",\n    \"sneia\",\n    \"påbud\",\n    \"morna\",\n    \"tøvær\",\n    \"fokal\",\n    \"kafir\",\n    \"våtna\",\n    \"riske\",\n    \"hambo\",\n    \"gulke\",\n    \"ploga\",\n    \"slurt\",\n    \"løynt\",\n    \"chips\",\n    \"pilte\",\n    \"skjor\",\n    \"horet\",\n    \"brølt\",\n    \"kufte\",\n    \"tøfle\",\n    \"melis\",\n    \"pirol\",\n    \"urban\",\n    \"ulikt\",\n    \"ureid\",\n    \"fanet\",\n    \"klipt\",\n    \"geirt\",\n    \"strie\",\n    \"hvisk\",\n    \"kjeft\",\n    \"læger\",\n    \"luske\",\n    \"orgel\",\n    \"kaiet\",\n    \"ornat\",\n    \"utapå\",\n    \"desim\",\n    \"duble\",\n    \"grønt\",\n    \"trena\",\n    \"lånta\",\n    \"metro\",\n    \"seifa\",\n    \"dekan\",\n    \"løyne\",\n    \"dølsk\",\n    \"tonem\",\n    \"festa\",\n    \"malje\",\n    \"utvei\",\n    \"andre\",\n    \"favør\",\n    \"vokse\",\n    \"sverm\",\n    \"krins\",\n    \"ranet\",\n    \"bielv\",\n    \"bleig\",\n    \"løing\",\n    \"konus\",\n    \"kurva\",\n    \"skimt\",\n    \"varmt\",\n    \"låner\",\n    \"byliv\",\n    \"signe\",\n    \"blank\",\n    \"sanke\",\n    \"laske\",\n    \"fjong\",\n    \"bogey\",\n    \"hynde\",\n    \"bytur\",\n    \"skrøn\",\n    \"knups\",\n    \"konet\",\n    \"style\",\n    \"raust\",\n    \"tårna\",\n    \"horst\",\n    \"sahib\",\n    \"humre\",\n    \"moden\",\n    \"stund\",\n    \"niøye\",\n    \"grent\",\n    \"sumak\",\n    \"topas\",\n    \"øyret\",\n    \"ruing\",\n    \"beila\",\n    \"børna\",\n    \"usamd\",\n    \"gulna\",\n    \"skålt\",\n    \"score\",\n    \"ånder\",\n    \"fatum\",\n    \"farke\",\n    \"senil\",\n    \"kvein\",\n    \"benka\",\n    \"bowla\",\n    \"album\",\n    \"kvase\",\n    \"silde\",\n    \"lysta\",\n    \"skåta\",\n    \"dryst\",\n    \"pælme\",\n    \"bonde\",\n    \"klang\",\n    \"stile\",\n    \"tynga\",\n    \"kvest\",\n    \"lydig\",\n    \"heima\",\n    \"ounce\",\n    \"kubet\",\n    \"usmak\",\n    \"sager\",\n    \"dumpt\",\n    \"pøbel\",\n    \"fermt\",\n    \"rugby\",\n    \"dulgt\",\n    \"pralt\",\n    \"silke\",\n    \"korny\",\n    \"hocke\",\n    \"flart\",\n    \"grine\",\n    \"slukt\",\n    \"ovapå\",\n    \"rafse\",\n    \"manet\",\n    \"fløke\",\n    \"blygd\",\n    \"sikla\",\n    \"fjesk\",\n    \"fable\",\n    \"rosin\",\n    \"åring\",\n    \"kjole\",\n    \"øking\",\n    \"tjåka\",\n    \"binær\",\n    \"trend\",\n    \"alert\",\n    \"tvære\",\n    \"dæven\",\n    \"tjuve\",\n    \"gjept\",\n    \"genus\",\n    \"varig\",\n    \"showa\",\n    \"djupn\",\n    \"kløvt\",\n    \"senit\",\n    \"bukta\",\n    \"fylka\",\n    \"spent\",\n    \"omvei\",\n    \"uting\",\n    \"dirke\",\n    \"mulna\",\n    \"henad\",\n    \"senat\",\n    \"votum\",\n    \"peist\",\n    \"mønje\",\n    \"trunk\",\n    \"eling\",\n    \"daget\",\n    \"honda\",\n    \"satyr\",\n    \"pløyd\",\n    \"salær\",\n    \"spong\",\n    \"sulka\",\n    \"vondt\",\n    \"seida\",\n    \"kompa\",\n    \"mango\",\n    \"seipa\",\n    \"latin\",\n    \"gurpe\",\n    \"støla\",\n    \"lurke\",\n    \"skylt\",\n    \"muret\",\n    \"bifag\",\n    \"humle\",\n    \"frakt\",\n    \"roman\",\n    \"gople\",\n    \"korsa\",\n    \"rapse\",\n    \"beløp\",\n    \"føyse\",\n    \"befal\",\n    \"rysta\",\n    \"gilde\",\n    \"jaske\",\n    \"lysne\",\n    \"avløp\",\n    \"pønal\",\n    \"tuner\",\n    \"klage\",\n    \"bravo\",\n    \"velur\",\n    \"lufte\",\n    \"hatsk\",\n    \"bomkø\",\n    \"smyle\",\n    \"brakt\",\n    \"sjakt\",\n    \"forte\",\n    \"utsig\",\n    \"ilagt\",\n    \"strøk\",\n    \"gylte\",\n    \"søyle\",\n    \"snyte\",\n    \"treda\",\n    \"under\",\n    \"voldt\",\n    \"gnure\",\n    \"nyter\",\n    \"skova\",\n    \"bolka\",\n    \"vidje\",\n    \"saldo\",\n    \"nulte\",\n    \"mjuka\",\n    \"tjafs\",\n    \"nupra\",\n    \"snilt\",\n    \"klamt\",\n    \"dipol\",\n    \"vegan\",\n    \"omdåp\",\n    \"notis\",\n    \"synde\",\n    \"myske\",\n    \"årveg\",\n    \"rushe\",\n    \"prega\",\n    \"keita\",\n    \"matbu\",\n    \"dalte\",\n    \"garve\",\n    \"tagne\",\n    \"slørt\",\n    \"smule\",\n    \"skryt\",\n    \"snokt\",\n    \"spika\",\n    \"buret\",\n    \"hiver\",\n    \"lompe\",\n    \"hugta\",\n    \"skilt\",\n    \"psyke\",\n    \"uanet\",\n    \"gildt\",\n    \"finer\",\n    \"stage\",\n    \"steng\",\n    \"bølge\",\n    \"bråte\",\n    \"hugav\",\n    \"avhør\",\n    \"polet\",\n    \"beglo\",\n    \"tamil\",\n    \"såvel\",\n    \"tavle\",\n    \"loset\",\n    \"gisna\",\n    \"gulka\",\n    \"rølpa\",\n    \"foret\",\n    \"ufred\",\n    \"spade\",\n    \"galei\",\n    \"pling\",\n    \"badet\",\n    \"autor\",\n    \"åsing\",\n    \"tjære\",\n    \"raket\",\n    \"rolig\",\n    \"rusle\",\n    \"jingo\",\n    \"gneis\",\n    \"hevda\",\n    \"gifte\",\n    \"kiste\",\n    \"knise\",\n    \"hufsa\",\n    \"gjest\",\n    \"bjørn\",\n    \"hufse\",\n    \"røyta\",\n    \"kavet\",\n    \"ulest\",\n    \"pante\",\n    \"storm\",\n    \"abrot\",\n    \"tusen\",\n    \"saket\",\n    \"nudel\",\n    \"slåpe\",\n    \"drøye\",\n    \"virka\",\n    \"rispa\",\n    \"aktør\",\n    \"kusma\",\n    \"tolka\",\n    \"væren\",\n    \"årlig\",\n    \"pruta\",\n    \"gipsa\",\n    \"velin\",\n    \"dilta\",\n    \"føykt\",\n    \"proft\",\n    \"surle\",\n    \"guida\",\n    \"debil\",\n    \"huset\",\n    \"sokna\",\n    \"føyka\",\n    \"såpet\",\n    \"ilska\",\n    \"solar\",\n    \"bakli\",\n    \"glida\",\n    \"hasje\",\n    \"taler\",\n    \"pokre\",\n    \"ujamt\",\n    \"motsi\",\n    \"sakne\",\n    \"vindu\",\n    \"løsen\",\n    \"hengi\",\n    \"strål\",\n    \"hvast\",\n    \"lukta\",\n    \"snurt\",\n    \"choka\",\n    \"dalet\",\n    \"dobla\",\n    \"iktus\",\n    \"korse\",\n    \"kløne\",\n    \"stiva\",\n    \"grase\",\n    \"klart\",\n    \"bulka\",\n    \"horde\",\n    \"pirog\",\n    \"smyge\",\n    \"junka\",\n    \"fromt\",\n    \"flire\",\n    \"pudle\",\n    \"spurv\",\n    \"koral\",\n    \"rikte\",\n    \"høyne\",\n    \"verdi\",\n    \"kjent\",\n    \"padre\",\n    \"amper\",\n    \"snøår\",\n    \"føder\",\n    \"gapet\",\n    \"nærma\",\n    \"kjøle\",\n    \"årbuk\",\n    \"buing\",\n    \"voksa\",\n    \"lenka\",\n    \"prime\",\n    \"tunga\",\n    \"mørkt\",\n    \"swing\",\n    \"ulmet\",\n    \"ekorn\",\n    \"snuft\",\n    \"upris\",\n    \"diska\",\n    \"eksil\",\n    \"baker\",\n    \"vesir\",\n    \"duska\",\n    \"trine\",\n    \"busta\",\n    \"asdic\",\n    \"svøpt\",\n    \"uenig\",\n    \"siret\",\n    \"ørken\",\n    \"binom\",\n    \"pinje\",\n    \"lunte\",\n    \"maken\",\n    \"diger\",\n    \"støyd\",\n    \"vokal\",\n    \"vanry\",\n    \"tampe\",\n    \"kleis\",\n    \"våset\",\n    \"slapt\",\n    \"putra\",\n    \"vesta\",\n    \"hukra\",\n    \"omlyd\",\n    \"ufora\",\n    \"enøyd\",\n    \"torsk\",\n    \"igjen\",\n    \"vinøs\",\n    \"cyste\",\n    \"marsk\",\n    \"glirt\",\n    \"vimra\",\n    \"lapis\",\n    \"nerts\",\n    \"skure\",\n    \"gisne\",\n    \"oblat\",\n    \"gnelt\",\n    \"havis\",\n    \"spjåk\",\n    \"umild\",\n    \"tørke\",\n    \"kleim\",\n    \"dings\",\n    \"lomvi\",\n    \"munka\",\n    \"gjølt\",\n    \"mygle\",\n    \"skrev\",\n    \"lørje\",\n    \"verpa\",\n    \"hvori\",\n    \"fælen\",\n    \"flære\",\n    \"nåtle\",\n    \"pynta\",\n    \"måned\",\n    \"uført\",\n    \"liter\",\n    \"nupre\",\n    \"drage\",\n    \"punch\",\n    \"rumla\",\n    \"ilske\",\n    \"aleut\",\n    \"binde\",\n    \"fnise\",\n    \"vinga\",\n    \"rensk\",\n    \"smeda\",\n    \"franc\",\n    \"aksle\",\n    \"leivd\",\n    \"urent\",\n    \"gåent\",\n    \"fyrig\",\n    \"stevn\",\n    \"kaper\",\n    \"flisa\",\n    \"hovel\",\n    \"vitre\",\n    \"vinby\",\n    \"vafle\",\n    \"visne\",\n    \"hånsk\",\n    \"dages\",\n    \"lunde\",\n    \"bakse\",\n    \"dunst\",\n    \"hengt\",\n    \"jotun\",\n    \"safir\",\n    \"spryd\",\n    \"sørge\",\n    \"takås\",\n    \"kuven\",\n    \"utopi\",\n    \"hinke\",\n    \"trave\",\n    \"femti\",\n    \"sjoge\",\n    \"fokus\",\n    \"purle\",\n    \"sirka\",\n    \"snelt\",\n    \"stode\",\n    \"flate\",\n    \"forme\",\n    \"prova\",\n    \"snare\",\n    \"harem\",\n    \"thorn\",\n    \"dansk\",\n    \"makro\",\n    \"snive\",\n    \"våken\",\n    \"tilby\",\n    \"evdøl\",\n    \"bakut\",\n    \"notar\",\n    \"sløya\",\n    \"blast\",\n    \"minet\",\n    \"vendt\",\n    \"ryste\",\n    \"kvalt\",\n    \"høste\",\n    \"møbel\",\n    \"sinke\",\n    \"bilag\",\n    \"klebt\",\n    \"luset\",\n    \"rådgi\",\n    \"sport\",\n    \"våkna\",\n    \"fetna\",\n    \"kimsa\",\n    \"grusa\",\n    \"hatig\",\n    \"rekst\",\n    \"herja\",\n    \"hedra\",\n    \"sælde\",\n    \"skumt\",\n    \"ildna\",\n    \"prist\",\n    \"uåpna\",\n    \"spile\",\n    \"stupe\",\n    \"tenar\",\n    \"etisk\",\n    \"slemt\",\n    \"fnyse\",\n    \"typus\",\n    \"vikla\",\n    \"skrie\",\n    \"plage\",\n    \"skoft\",\n    \"skule\",\n    \"ølfat\",\n    \"ripet\",\n    \"utarv\",\n    \"nødår\",\n    \"baust\",\n    \"kramt\",\n    \"bistå\",\n    \"endiv\",\n    \"atypi\",\n    \"iføre\",\n    \"blind\",\n    \"svøpe\",\n    \"slave\",\n    \"hadsj\",\n    \"gapen\",\n    \"varde\",\n    \"vånde\",\n    \"årvak\",\n    \"minke\",\n    \"videt\",\n    \"prunk\",\n    \"mørna\",\n    \"ovret\",\n    \"eland\",\n    \"sølje\",\n    \"tåpen\",\n    \"manke\",\n    \"råske\",\n    \"drops\",\n    \"bryne\",\n    \"bydag\",\n    \"fjøra\",\n    \"isøde\",\n    \"masen\",\n    \"hefta\",\n    \"dukat\",\n    \"livne\",\n    \"svage\",\n    \"grade\",\n    \"snøgt\",\n    \"rykte\",\n    \"blæra\",\n    \"laber\",\n    \"hykla\",\n    \"frank\",\n    \"skole\",\n    \"skive\",\n    \"kiset\",\n    \"rable\",\n    \"kreol\",\n    \"lesta\",\n    \"bokna\",\n    \"nufse\",\n    \"verna\",\n    \"grind\",\n    \"bråne\",\n    \"gaule\",\n    \"myrde\",\n    \"raspe\",\n    \"hands\",\n    \"føyst\",\n    \"mulkt\",\n    \"påhør\",\n    \"sprit\",\n    \"svina\",\n    \"vulke\",\n    \"maket\",\n    \"nokså\",\n    \"tøing\",\n    \"rebus\",\n    \"yndig\",\n    \"kjørt\",\n    \"grand\",\n    \"rødma\",\n    \"kante\",\n    \"peisa\",\n    \"pivot\",\n    \"hjort\",\n    \"sulte\",\n    \"viser\",\n    \"lutra\",\n    \"mjøle\",\n    \"prale\",\n    \"nikse\",\n    \"riket\",\n    \"hølja\",\n    \"prate\",\n    \"krane\",\n    \"herma\",\n    \"skate\",\n    \"vadre\",\n    \"skint\",\n    \"atopi\",\n    \"sfære\",\n    \"spyle\",\n    \"skirt\",\n    \"besyv\",\n    \"famøs\",\n    \"furta\",\n    \"avstå\",\n    \"hamle\",\n    \"fryst\",\n    \"hosta\",\n    \"huske\",\n    \"iført\",\n    \"klønt\",\n    \"semin\",\n    \"fløkt\",\n    \"gemal\",\n    \"steik\",\n    \"disko\",\n    \"albin\",\n    \"flåte\",\n    \"fying\",\n    \"guide\",\n    \"hilst\",\n    \"tyder\",\n    \"falsk\",\n    \"kunde\",\n    \"høvle\",\n    \"holme\",\n    \"utfri\",\n    \"huner\",\n    \"skavl\",\n    \"symre\",\n    \"duret\",\n    \"varte\",\n    \"jodle\",\n    \"ærlig\",\n    \"sveig\",\n    \"turna\",\n    \"amorf\",\n    \"greva\",\n    \"barsk\",\n    \"furte\",\n    \"styla\",\n    \"falme\",\n    \"klave\",\n    \"konta\",\n    \"lepja\",\n    \"poesi\",\n    \"forse\",\n    \"humid\",\n    \"lying\",\n    \"losje\",\n    \"grisa\",\n    \"dusen\",\n    \"polsk\",\n    \"strev\",\n    \"varme\",\n    \"gliom\",\n    \"skruv\",\n    \"futil\",\n    \"buket\",\n    \"harme\",\n    \"ramle\",\n    \"syret\",\n    \"biten\",\n    \"balet\",\n    \"staur\",\n    \"prisa\",\n    \"dumpa\",\n    \"vrælt\",\n    \"rikla\",\n    \"curla\",\n    \"driks\",\n    \"poeng\",\n    \"kobla\",\n    \"gjømt\",\n    \"kvita\",\n    \"drømt\",\n    \"nyord\",\n    \"hijab\",\n    \"tablå\",\n    \"udryg\",\n    \"losji\",\n    \"floka\",\n    \"glide\",\n    \"ilsom\",\n    \"glose\",\n    \"rødåt\",\n    \"slurk\",\n    \"rival\",\n    \"vilje\",\n    \"suite\",\n    \"light\",\n    \"minst\",\n    \"trivd\",\n    \"kjære\",\n    \"skrap\",\n    \"trumf\",\n    \"kitla\",\n    \"tramp\",\n    \"smakt\",\n    \"sitra\",\n    \"iland\",\n    \"yngle\",\n    \"dulme\",\n    \"bonet\",\n    \"pusha\",\n    \"soper\",\n    \"svart\",\n    \"utysk\",\n    \"lumpe\",\n    \"tvebo\",\n    \"livre\",\n    \"slage\",\n    \"hønsa\",\n    \"maset\",\n    \"støye\",\n    \"ensom\",\n    \"fjern\",\n    \"curie\",\n    \"drive\",\n    \"klent\",\n    \"trona\",\n    \"algin\",\n    \"beilt\",\n    \"fiber\",\n    \"sløyd\",\n    \"rukle\",\n    \"tisle\",\n    \"alkis\",\n    \"sjefa\",\n    \"gusta\",\n    \"iltog\",\n    \"lader\",\n    \"kleba\",\n    \"grepa\",\n    \"mørje\",\n    \"dachs\",\n    \"auket\",\n    \"denim\",\n    \"tafse\",\n    \"røyse\",\n    \"stuke\",\n    \"vaske\",\n    \"rynka\",\n    \"yacht\",\n    \"ystel\",\n    \"lasur\",\n    \"sture\",\n    \"kinge\",\n    \"medgå\",\n    \"aktiv\",\n    \"refst\",\n    \"kilen\",\n    \"spion\",\n    \"trase\",\n    \"fange\",\n    \"klest\",\n    \"simpe\",\n    \"skåra\",\n    \"demra\",\n    \"mysli\",\n    \"deisa\",\n    \"gurpa\",\n    \"reipa\",\n    \"remis\",\n    \"føyet\",\n    \"hulke\",\n    \"slikt\",\n    \"triks\",\n    \"stola\",\n    \"mulre\",\n    \"vinår\",\n    \"vrake\",\n    \"galte\",\n    \"rånet\",\n    \"kvist\",\n    \"dovne\",\n    \"høyre\",\n    \"føket\",\n    \"aften\",\n    \"biskt\",\n    \"ufset\",\n    \"bråkt\",\n    \"dunet\",\n    \"salet\",\n    \"kjave\",\n    \"siter\",\n    \"albue\",\n    \"frega\",\n    \"høyde\",\n    \"kylne\",\n    \"purin\",\n    \"geint\",\n    \"raget\",\n    \"gomle\",\n    \"remja\",\n    \"skyet\",\n    \"kolje\",\n    \"plank\",\n    \"tresk\",\n    \"kulse\",\n    \"lauge\",\n    \"kurle\",\n    \"tiple\",\n    \"kopal\",\n    \"harpe\",\n    \"skåna\",\n    \"sutra\",\n    \"truck\",\n    \"gjære\",\n    \"piano\",\n    \"klint\",\n    \"snert\",\n    \"laing\",\n    \"viral\",\n    \"drygt\",\n    \"åtsel\",\n    \"ertog\",\n    \"pokal\",\n    \"sleip\",\n    \"travd\",\n    \"andet\",\n    \"tilde\",\n    \"arves\",\n    \"snøvl\",\n    \"verst\",\n    \"ranke\",\n    \"makte\",\n    \"kvast\",\n    \"ganer\",\n    \"svelt\",\n    \"faens\",\n    \"drakt\",\n    \"brife\",\n    \"føner\",\n    \"gnåle\",\n    \"slite\",\n    \"sylte\",\n    \"gjemt\",\n    \"polkø\",\n    \"vatne\",\n    \"sverd\",\n    \"skurd\",\n    \"snørt\",\n    \"plane\",\n    \"slima\",\n    \"usøta\",\n    \"jækla\",\n    \"vinde\",\n    \"midje\",\n    \"skjul\",\n    \"våget\",\n    \"macho\",\n    \"blome\",\n    \"børst\",\n    \"gjerd\",\n    \"bayer\",\n    \"myopi\",\n    \"glupt\",\n    \"hilde\",\n    \"kryne\",\n    \"ilter\",\n    \"huskø\",\n    \"isnet\",\n    \"åking\",\n    \"sambu\",\n    \"guano\",\n    \"drønt\",\n    \"tiske\",\n    \"puget\",\n    \"avkle\",\n    \"trane\",\n    \"rugde\",\n    \"bolta\",\n    \"skjøt\",\n    \"eting\",\n    \"gjort\",\n    \"vesal\",\n    \"frels\",\n    \"frost\",\n    \"ørske\",\n    \"skolt\",\n    \"punga\",\n    \"åstak\",\n    \"reivd\",\n    \"trise\",\n    \"sykna\",\n    \"spore\",\n    \"freda\",\n    \"demon\",\n    \"likne\",\n    \"pulsa\",\n    \"imøte\",\n    \"kovna\",\n    \"krans\",\n    \"grope\",\n    \"spant\",\n    \"gjørs\",\n    \"kulte\",\n    \"syrne\",\n    \"gitar\",\n    \"skvær\",\n    \"svine\",\n    \"utlyd\",\n    \"svekt\",\n    \"barde\",\n    \"lirke\",\n    \"kline\",\n    \"slamp\",\n    \"dvelt\",\n    \"ølrus\",\n    \"jøgle\",\n    \"avler\",\n    \"lugar\",\n    \"aksje\",\n    \"jøgla\",\n    \"range\",\n    \"vulst\",\n    \"goldt\",\n    \"pådra\",\n    \"fatle\",\n    \"largo\",\n    \"onkel\",\n    \"pirka\",\n    \"tisla\",\n    \"slang\",\n    \"dufte\",\n    \"grelt\",\n    \"punge\",\n    \"slevd\",\n    \"dyrka\",\n    \"fesjå\",\n    \"frasi\",\n    \"døyve\",\n    \"feigt\",\n    \"svare\",\n    \"tapir\",\n    \"plant\",\n    \"traud\",\n    \"høymo\",\n    \"flåse\",\n    \"utsæd\",\n    \"ferga\",\n    \"banet\",\n    \"hysja\",\n    \"likså\",\n    \"ulyst\",\n    \"tryna\",\n    \"rusla\",\n    \"snyta\",\n    \"hulet\",\n    \"agnor\",\n    \"hydra\",\n    \"seigt\",\n    \"sjuer\",\n    \"dverg\",\n    \"helda\",\n    \"høgde\",\n    \"snøft\",\n    \"firet\",\n    \"lenda\",\n    \"borti\",\n    \"rulta\",\n    \"rynke\",\n    \"kleia\",\n    \"hikst\",\n    \"blåna\",\n    \"nikab\",\n    \"ubest\",\n    \"draft\",\n    \"human\",\n    \"slime\",\n    \"fomle\",\n    \"glefs\",\n    \"brast\",\n    \"fadet\",\n    \"isnål\",\n    \"baste\",\n    \"duste\",\n    \"islom\",\n    \"toing\",\n    \"tyfon\",\n    \"krumt\",\n    \"fløta\",\n    \"gnask\",\n    \"treig\",\n    \"lugom\",\n    \"skarn\",\n    \"huska\",\n    \"okapi\",\n    \"hagle\",\n    \"mulen\",\n    \"afori\",\n    \"mekla\",\n    \"rompe\",\n    \"suger\",\n    \"pilka\",\n    \"avhol\",\n    \"geina\",\n    \"hoven\",\n    \"stank\",\n    \"nyvei\",\n    \"våket\",\n    \"mjuke\",\n    \"nådig\",\n    \"lognt\",\n    \"frase\",\n    \"haket\",\n    \"runke\",\n    \"krasl\",\n    \"ufisk\",\n    \"kraft\",\n    \"nesbu\",\n    \"trega\",\n    \"brekt\",\n    \"lunta\",\n    \"brusk\",\n    \"debut\",\n    \"naube\",\n    \"fista\",\n    \"enzym\",\n    \"tilse\",\n    \"butan\",\n    \"gjesp\",\n    \"tilje\",\n    \"slure\",\n    \"ørten\",\n    \"fysen\",\n    \"bragd\",\n    \"islag\",\n    \"korta\",\n    \"vokst\",\n    \"øksel\",\n    \"hjord\",\n    \"skeia\",\n    \"angst\",\n    \"lykta\",\n    \"skyru\",\n    \"rundt\",\n    \"utløp\"\n]\n\nexport default words;\n","<script lang=\"ts\">\n    import WordleRow from './WordleRow.svelte';\n    import words from './words.js'\n\n    let cDate = new Date();\n    let cYear = cDate.getFullYear();\n    let cMonth = cDate.getMonth() + 1;\n    let cDay = cDate.getDate();\n    let dateString = \"\" + cYear + \"\" + cMonth + \"\" + cDay;\n    let dateNum = parseInt(dateString);\n\n    let word = words[dateNum % words.length];\n\n    let solution = word;\n    let rowSolution = '';\n\n    enum RowState {\n        UNEVALUATED,\n        IN_PROCESS,\n        WRONG,\n        CORRECT,\n    }\n\n    let rowStates = [RowState.IN_PROCESS, RowState.UNEVALUATED, RowState.UNEVALUATED, RowState.UNEVALUATED, RowState.UNEVALUATED, RowState.UNEVALUATED]\n\n    function nextRoundOrEnd(isCorrect: boolean) {\n        if (!isCorrect) {\n            let nextRowDecided = false\n            rowStates = rowStates.map(state => {\n                if (state == RowState.IN_PROCESS) {\n                    return isCorrect ? RowState.CORRECT : RowState.WRONG\n                } else if (state == RowState.UNEVALUATED && !nextRowDecided) {\n                    nextRowDecided = true\n                    return RowState.IN_PROCESS\n                }\n                return state\n            })\n        }\n    }\n</script>\n<div>\n    <h1>ORDLE</h1>\n\n    {#each rowStates as row}\n    <WordleRow \n        correctSolution={solution}\n        isActive={row == RowState.IN_PROCESS}\n        onProcessed={(isCorrect) => nextRoundOrEnd(isCorrect)}\n    />\n    {/each}\n</div>\n<style>\n    div {\n\t\twidth: fit-content;\n\t\tmargin: 0 auto;\n    }\n\n    h1 {\n        text-align: center;\n        font-size: 3em;\n        color: #FFF;\n        border-bottom: 1px solid #b9b9b9;\n    }\n</style>","<script lang=\"ts\">\n\timport Wordle from \"./Wordle.svelte\";\n</script>\n<head>\n\t<title>Ordle</title>\n</head>\n\n<Wordle />\n\n<style>\n\t:global(body) {\n\t\tbackground-color: #222222;\n\t}\n</style>","import App from './App.svelte';\nimport words from './words.js';\nlet cDate = new Date();\nlet cYear = cDate.getFullYear();\nlet cMonth = cDate.getMonth() + 1;\nlet cDay = cDate.getDate();\nlet dateString = \"\" + cYear + \"\" + cMonth + \"\" + cDay;\nlet dateNum = parseInt(dateString);\nlet word = words[dateNum % words.length];\nconst app = new App({\n    target: document.body,\n    props: {\n        name: word\n    }\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","attr","attribute","value","removeAttribute","getAttribute","setAttribute","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","options","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","wholeText","event","handler","addEventListener","removeEventListener","correctSolution","isActive","onProcessed","StateClass","Input","constructor","state","EMPTY","character","currentInput","inputs","parseKey","key","uppercaseSolution","toUpperCase","newStates","input","CORRECT","includes","WRONG_POSITION","UNEVALUATED","every","test","words","IN_PROCESS","r","cDate","Date","cYear","getFullYear","cMonth","getMonth","cDay","getDate","dateNum","parseInt","solution","RowState","rowStates","nextRoundOrEnd","isCorrect","nextRowDecided","WRONG","word","body"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAsRhF,SAASE,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAoDvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAUxC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAEhC,SAASQ,EAAaC,EAAYC,GAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,GAAK,EACpCF,EAAWE,IACXF,EAAWE,GAAGE,EAAEH,GAG5B,SAASI,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAoBlC,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAqChB,SAASI,EAAKtB,EAAMuB,EAAWC,GACd,MAATA,EACAxB,EAAKyB,gBAAgBF,GAChBvB,EAAK0B,aAAaH,KAAeC,GACtCxB,EAAK2B,aAAaJ,EAAWC,GA+erC,IAAII,EACJ,SAASC,EAAsBC,GAC3BF,EAAoBE,EAwDxB,MAAMC,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoBrD,GACzB+C,EAAiBO,KAAKtD,GAuB1B,MAAMuD,EAAiB,IAAIC,IAC3B,IAAIC,EAAW,EACf,SAASC,IACL,MAAMC,EAAkBjB,EACxB,EAAG,CAGC,KAAOe,EAAWZ,EAAiBnB,QAAQ,CACvC,MAAMkB,EAAYC,EAAiBY,GACnCA,IACAd,EAAsBC,GACtBgB,EAAOhB,EAAUiB,IAKrB,IAHAlB,EAAsB,MACtBE,EAAiBnB,OAAS,EAC1B+B,EAAW,EACJX,EAAkBpB,QACrBoB,EAAkBgB,KAAlBhB,GAIJ,IAAK,IAAIrB,EAAI,EAAGA,EAAIsB,EAAiBrB,OAAQD,GAAK,EAAG,CACjD,MAAMsC,EAAWhB,EAAiBtB,GAC7B8B,EAAeS,IAAID,KAEpBR,EAAeU,IAAIF,GACnBA,KAGRhB,EAAiBrB,OAAS,QACrBmB,EAAiBnB,QAC1B,KAAOsB,EAAgBtB,QACnBsB,EAAgBc,KAAhBd,GAEJI,GAAmB,EACnBG,EAAeW,QACfvB,EAAsBgB,GAE1B,SAASC,EAAOC,GACZ,GAAoB,OAAhBA,EAAGM,SAAmB,CACtBN,EAAGD,SACHxD,EAAQyD,EAAGO,eACX,MAAMC,EAAQR,EAAGQ,MACjBR,EAAGQ,MAAQ,EAAE,GACbR,EAAGM,UAAYN,EAAGM,SAASG,EAAET,EAAGU,IAAKF,GACrCR,EAAGW,aAAalE,QAAQ+C,IAiBhC,MAAMoB,EAAW,IAAIjB,IACrB,IAAIkB,EAcJ,SAASC,EAAcC,EAAOC,GACtBD,GAASA,EAAMnD,IACfgD,EAASK,OAAOF,GAChBA,EAAMnD,EAAEoD,IAGhB,SAASE,EAAeH,EAAOC,EAAO1D,EAAQ4C,GAC1C,GAAIa,GAASA,EAAMI,EAAG,CAClB,GAAIP,EAAST,IAAIY,GACb,OACJH,EAASR,IAAIW,GACbF,EAAOO,EAAE3B,MAAK,KACVmB,EAASK,OAAOF,GACZb,IACI5C,GACAyD,EAAMjD,EAAE,GACZoC,QAGRa,EAAMI,EAAEH,IA6oBhB,SAASK,EAAiBN,GACtBA,GAASA,EAAMK,IAKnB,SAASE,EAAgBvC,EAAW/B,EAAQI,EAAQmE,GAChD,MAAMjB,SAAEA,EAAQkB,SAAEA,EAAQC,WAAEA,EAAUd,aAAEA,GAAiB5B,EAAUiB,GACnEM,GAAYA,EAASoB,EAAE1E,EAAQI,GAC1BmE,GAED/B,GAAoB,KAChB,MAAMmC,EAAiBH,EAASI,IAAI1F,GAAK2F,OAAOnF,GAC5C+E,EACAA,EAAWhC,QAAQkC,GAKnBpF,EAAQoF,GAEZ5C,EAAUiB,GAAGwB,SAAW,MAGhCb,EAAalE,QAAQ+C,GAEzB,SAASsC,EAAkB/C,EAAWpB,GAClC,MAAMqC,EAAKjB,EAAUiB,GACD,OAAhBA,EAAGM,WACH/D,EAAQyD,EAAGyB,YACXzB,EAAGM,UAAYN,EAAGM,SAASxC,EAAEH,GAG7BqC,EAAGyB,WAAazB,EAAGM,SAAW,KAC9BN,EAAGU,IAAM,IAGjB,SAASqB,EAAWhD,EAAWnB,IACI,IAA3BmB,EAAUiB,GAAGQ,MAAM,KACnBxB,EAAiBS,KAAKV,GArzBrBQ,IACDA,GAAmB,EACnBH,EAAiB4C,KAAKnC,IAqzBtBd,EAAUiB,GAAGQ,MAAMyB,KAAK,IAE5BlD,EAAUiB,GAAGQ,MAAO5C,EAAI,GAAM,IAAO,GAAMA,EAAI,GAEnD,SAASsE,EAAKnD,EAAWoD,EAASC,EAAUC,EAAiBC,EAAWC,EAAOC,EAAehC,EAAQ,EAAE,IACpG,MAAMiC,EAAmB5D,EACzBC,EAAsBC,GACtB,MAAMiB,EAAKjB,EAAUiB,GAAK,CACtBM,SAAU,KACVI,IAAK,KAEL6B,MAAAA,EACAxC,OAAQ9D,EACRqG,UAAAA,EACAI,MAAOtG,IAEPoF,SAAU,GACVC,WAAY,GACZkB,cAAe,GACfpC,cAAe,GACfI,aAAc,GACdiC,QAAS,IAAIC,IAAIV,EAAQS,UAAYH,EAAmBA,EAAiBzC,GAAG4C,QAAU,KAEtFE,UAAW1G,IACXoE,MAAAA,EACAuC,YAAY,EACZC,KAAMb,EAAQnF,QAAUyF,EAAiBzC,GAAGgD,MAEhDR,GAAiBA,EAAcxC,EAAGgD,MAClC,IAAIC,GAAQ,EAkBZ,GAjBAjD,EAAGU,IAAM0B,EACHA,EAASrD,EAAWoD,EAAQI,OAAS,IAAI,CAAC3E,EAAGsF,KAAQC,KACnD,MAAM1E,EAAQ0E,EAAKtF,OAASsF,EAAK,GAAKD,EAOtC,OANIlD,EAAGU,KAAO4B,EAAUtC,EAAGU,IAAI9C,GAAIoC,EAAGU,IAAI9C,GAAKa,MACtCuB,EAAG+C,YAAc/C,EAAG0C,MAAM9E,IAC3BoC,EAAG0C,MAAM9E,GAAGa,GACZwE,GACAlB,EAAWhD,EAAWnB,IAEvBsF,KAET,GACNlD,EAAGD,SACHkD,GAAQ,EACR1G,EAAQyD,EAAGO,eAEXP,EAAGM,WAAW+B,GAAkBA,EAAgBrC,EAAGU,KAC/CyB,EAAQnF,OAAQ,CAChB,GAAImF,EAAQiB,QAAS,CAEjB,MAAMC,EA91ClB,SAAkBtF,GACd,OAAOuF,MAAMC,KAAKxF,EAAQyF,YA61CJC,CAAStB,EAAQnF,QAE/BgD,EAAGM,UAAYN,EAAGM,SAASoD,EAAEL,GAC7BA,EAAM5G,QAAQa,QAId0C,EAAGM,UAAYN,EAAGM,SAASc,IAE3Be,EAAQwB,OACR7C,EAAc/B,EAAUiB,GAAGM,UAC/BgB,EAAgBvC,EAAWoD,EAAQnF,OAAQmF,EAAQ/E,OAAQ+E,EAAQZ,eAEnE1B,IAEJf,EAAsB2D,GAkD1B,MAAMmB,EACFC,WACI/B,EAAkBgC,KAAM,GACxBA,KAAKD,SAAW5H,EAEpB8H,IAAIC,EAAM9D,GACN,MAAM4C,EAAagB,KAAK9D,GAAG8C,UAAUkB,KAAUF,KAAK9D,GAAG8C,UAAUkB,GAAQ,IAEzE,OADAlB,EAAUrD,KAAKS,GACR,KACH,MAAM+D,EAAQnB,EAAUoB,QAAQhE,IACjB,IAAX+D,GACAnB,EAAUqB,OAAOF,EAAO,IAGpCG,KAAKC,GA73DT,IAAkBC,EA83DNR,KAAKS,QA93DCD,EA83DkBD,EA73DG,IAA5BhI,OAAOmI,KAAKF,GAAKzG,UA83DhBiG,KAAK9D,GAAG+C,YAAa,EACrBe,KAAKS,MAAMF,GACXP,KAAK9D,GAAG+C,YAAa,gHC32DOrC,iEAATA,+BAAvBvD,oCAAgCuD,WDmjBxC,SAAkBvC,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKsG,YAAcrG,IACnBD,EAAKC,KAAOA,kCCtjBWsC,qFADpBA,0BAAL7C,oHADW6C,KAAW,SAAW,uCAAvCvD,oDD4VA,IAAgBF,EAAMyH,EAAOC,EAASxC,MAAtBlF,gBAAMyH,YAAOC,OACzB1H,EAAK2H,iBAAiBF,EAAOC,EAASxC,KAC/B,IAAMlF,EAAK4H,oBAAoBH,EAAOC,EAASxC,uCC7V/CzB,aAAL7C,6HAAAA,2BADW6C,KAAW,SAAW,4HA7DxBoE,EAAkB,gBAClBC,GAAW,kBACXC,SAENC,YAAAA,GACDA,EAAR,MAAA,QACQA,EAAR,YAAA,cACQA,EAAR,MAAA,cACQA,EAAR,eAAA,iBACQA,EAAR,QAAA,WALSA,IAAAA,aAQCC,EAANC,cACIrB,KAARsB,MAAgBH,EAAWI,MACnBvB,KAARwB,UAAoB,SAGZC,EAAe,EACfC,OAAcN,MAAaA,MAAaA,MAAaA,MAAaA,YAE7DO,EAASf,OACTK,aAEDW,EAAMhB,EAAMgB,OAEJ,UAARA,GAAmC,GAAhBH,OACfI,EAAoBb,EAAgBc,cACpCC,EAAYL,EAAO5D,MAAKkE,EAAO7B,IAC5B0B,EAAkB1B,GAAO2B,eAAiBE,EAAMR,UAAUM,cAClDX,EAAWc,QACXJ,EAAkBK,SAASF,EAAMR,UAAUM,eAC3CX,EAAWgB,eAEfhB,EAAWiB,cAGtBlB,EAAYa,EAAUM,OAAMf,IAAoBH,EAAWc,gBAE3DP,EAASA,EAAO5D,MAAKkE,EAAO7B,MAEpBmB,MAAOS,EAAU5B,GACjBqB,UAAWQ,EAAMR,mBAIzBP,GAAW,OACI,cAARW,GAAuBH,EAAe,GAC7CA,GAAgB,MAChBC,EAAOD,GAAcH,MAAQH,EAAWI,aACxCG,EAAOD,GAAcD,UAAY,QACZ,GAAdI,EAAI7H,2BAAkCuI,KAAKV,IAAQH,EAAe,QACzEC,EAAOD,GAAcH,MAAQH,EAAWiB,mBACxCV,EAAOD,GAAcD,UAAYI,KAEjCH,GAAgB,4JAKHb,GAASe,EAASf,2GC5DpC,IAAI2B,EAAQ,CACfr+HqB3F,cACPA,OAAOA,KAAS4F,+GAAhB5F,OAAOA,KAAS4F,kIAHvB5F,0BAAL7C,2OAHNV,SACIJ,6FAEO2D,aAAL7C,6GHsiCFgD,EAAS,CACL0F,EAAG,EACHnF,EAAG,GACHX,EAAGI,OGziCLhD,4BH6iCGgD,EAAO0F,GACRhK,EAAQsE,EAAOO,GAEnBP,EAASA,EAAOJ,gCGhjCd5C,0IAvCE2I,MAAYC,KACZC,EAAQF,EAAMG,cACdC,EAASJ,EAAMK,WAAa,EAC5BC,EAAON,EAAMO,UAEbC,EAAUC,SADG,GAAKP,EAAaE,EAAcE,GAK7CI,EAFOb,EAAMW,EAAUX,EAAMxI,YAK5BsJ,YAAAA,GACDA,EAARA,EAAA,YAAA,GAAA,cACQA,EAARA,EAAA,WAAA,GAAA,aACQA,EAARA,EAAA,MAAA,GAAA,QACQA,EAARA,EAAA,QAAA,GAAA,WAJSA,IAAAA,WAODC,GAAaD,EAASb,WAAYa,EAASjB,YAAaiB,EAASjB,YAAaiB,EAASjB,YAAaiB,EAASjB,YAAaiB,EAASjB,sBAE9HmB,EAAeC,OACfA,OACGC,GAAiB,MACrBH,EAAYA,EAAUxF,KAAIwD,GAClBA,GAAS+B,EAASb,WACXgB,EAAYH,EAASpB,QAAUoB,EAASK,MACxCpC,GAAS+B,EAASjB,aAAgBqB,EAItCnC,GAHHmC,GAAiB,EACVJ,EAASb,+BAcdgB,GAAcD,EAAeC,iMC5CnDnK,oICDA,IAAIqJ,EAAQ,IAAIC,KACZC,EAAQF,EAAMG,cACdC,EAASJ,EAAMK,WAAa,EAC5BC,EAAON,EAAMO,UAEbC,EAAUC,SADG,GAAKP,EAAaE,EAAcE,GAE7CW,GAAOpB,EAAMW,EAAUX,EAAMxI,eACrB,mEAAQ,CAChBb,OAAQiB,SAASyJ,KACjBnF,MAAO,CACHvE,KAAMyJ"}